@doc "## `vltransform` in `vllayer()`, `plot()` and `vlspec()`\nOne of :\n\n- **case #1**\n  - `timeUnit` :   (??? or ???)\n  - `field` : The data field to apply time unit. *see help for `vlfield()`*\n  - `as` :   (String/Symbol) The output field to write the timeUnit value.\n\n- **case #2**\n  - `default` :   (String/Symbol) The default value to use if lookup fails.  *Default value:* `null`\n  - `as` :   (String/Symbol or ???) The field or fields for storing the computed formula value. If `from.fields` is specified, the transform will use the same names for `as`. If `from.fields` is not specified, `as` has to be a string and we put the whole object into the data under the specified name.\n  - `from` :  *see help for `vlfrom()`*\n  - `lookup` :   (String/Symbol) Key in primary data source.\n\n- **case #3**\n  - `filter` :  *see help for `vlfilter()`*\n\n- **case #4**\n  - `bin` : An object indicating bin properties, or simply `true` for using default bin parameters. *see help for `vlbin()`*\n  - `field` : The data field to bin. *see help for `vlfield()`*\n  - `as` :   (String/Symbol) The output fields at which to write the start and end bin values.\n\n- **case #5**\n  - `groupby` :   (Array of String/Symbol) The data fields to group by. If not specified, a single group containing all data objects will be used.\n  - `aggregate` : Array of objects that define fields to aggregate. *see help for `vlaggregate()`*\n\n- **case #6**\n  - `calculate` :   (String/Symbol) A [expression](https://vega.github.io/vega-lite/docs/types.html#expression) string. Use the variable `datum` to refer to the current data object.\n  - `as` :   (String/Symbol) The field for storing the computed formula value.\n" vltransform
@doc "## `vlsize` in `vlencoding()`\nOne of :\n\n- **case #1**\n  A ValueDef with Condition<ValueDef | FieldDef> {    condition: {field: ...} | {value: ...},    value: ..., }\n\n  - `condition` : A field definition or one or more value definition(s) with a selection predicate. *see help for `vlcondition()`*\n  - `value` :   (Number, String/Symbol or Bool) A constant value in visual domain.\n\n- **case #2**\n  A FieldDef with Condition<ValueDef> {    condition: {value: ...},    field: ...,    ... }\n\n  - `legend` : An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.  *Default value:* If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied. *see help for `vllegend()`*\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `sort` : Sort order for the encoded field. Supported `sort` values include `\"ascending\"`, `\"descending\"` and `null` (no sorting). For fields with discrete domains, `sort` can also be a [sort field definition object](https://vega.github.io/vega-lite/docs/sort.html#sort-field).  *Default value:* `\"ascending\"` *see help for `vlsort()`*\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `condition` : One or more value definition(s) with a selection predicate.  *Note:* A field definition's `condition` property can only contain [value definitions](https://vega.github.io/vega-lite/docs/encoding.html#value-def) since Vega-Lite only allows at most one encoded field per encoding channel. *see help for `vlcondition()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `scale` :  *see help for `vlscale()`*\n" vlsize
@doc "## `vlheader` in `vlcolumn()` and `vlrow()`\nHeaders of row / column channels for faceted plots.\n\n- `format` : The formatting pattern for labels. This is D3's [number format pattern](https://github.com/d3/d3-format#locale_format) for quantitative fields and D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format) for time field.  See the [format documentation](format.html) for more information.  *Default value:*  derived from [numberFormat](config.html#format) config for quantitative fields and from [timeFormat](config.html#format) config for temporal fields. *see help for `vlformat()`*\n- `labelAngle` :   (Number) The rotation angle of the header labels.  *Default value:* `0`.\n- `title` : A title for the field. If `null`, the title will be removed.  *Default value:*  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as a part of the title (e.g., `\"Sum of Profit\"`). If the field is binned or has a time unit applied, the applied function will be denoted in parentheses (e.g., `\"Profit (binned)\"`, `\"Transaction Date (year-month)\"`).  Otherwise, the title is simply the field name.  *Note*: You can customize the default field title format by providing the [`fieldTitle` property in the [config](config.html) or [`fieldTitle` function via the `compile` function's options](compile.html#field-title). *see help for `vltitle()`*\n" vlheader
@doc "## `vly2` in `vlencoding()`\nOne of :\n\n- **case #1**\n  Definition object for a data field, its type and transformation of an encoding channel.\n\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n\n- **case #2**\n  Definition object for a constant value of an encoding channel.\n\n  - `value` :   (Number, String/Symbol or Bool) A constant value in visual domain (e.g., `\"red\"` / \"#0099ff\" for color, values between `0` to `1` for opacity).\n" vly2
@doc "## `vlscale` in `vlconfig()`\n- `minStrokeWidth` :   (Number) Default minimum strokeWidth for strokeWidth (or rule/line's size) scale with zero=false.  *Default value:* `1`\n- `rangeStep` :   (Number or Void) Default range step for band and point scales of (1) the `y` channel and (2) the `x` channel when the mark is not `text`.  *Default value:* `21`\n- `maxFontSize` :   (Number) The default max value for mapping quantitative fields to text's size/fontSize.  *Default value:* `40`\n- `maxBandSize` :   (Number) The default max value for mapping quantitative fields to bar's size/bandSize.  If undefined (default), we will use the scale's `rangeStep` - 1.\n- `textXRangeStep` :   (Number) Default range step for `x` band and point scales of text marks.  *Default value:* `90`\n- `useUnaggregatedDomain` :   (Bool) Use the source data range before aggregation as scale domain instead of aggregated data for aggregate axis.  This is equivalent to setting `domain` to `\"unaggregate\"` for aggregated _quantitative_ fields by default.  This property only works with aggregate functions that produce values within the raw data domain (`\"mean\"`, `\"average\"`, `\"median\"`, `\"q1\"`, `\"q3\"`, `\"min\"`, `\"max\"`). For other aggregations that produce values outside of the raw data domain (e.g. `\"count\"`, `\"sum\"`), this property is ignored.  *Default value:* `false`\n- `continuousPadding` :   (Number) Default padding for continuous scales.  *Default:* `5` for continuous x-scale of a vertical bar and continuous y-scale of a horizontal bar.; `0` otherwise.\n- `clamp` :   (Bool) If true, values that exceed the data domain are clamped to either the minimum or maximum range value\n- `pointPadding` :   (Number) Default outer padding for `x` and `y` point-ordinal scales.  *Default value:* `0.5`\n- `maxSize` :   (Number) Default max value for point size scale.\n- `round` :   (Bool) If true, rounds numeric output values to integers. This can be helpful for snapping to the pixel grid. (Only available for `x`, `y`, and `size` scales.)\n- `minFontSize` :   (Number) The default min value for mapping quantitative fields to tick's size/fontSize scale with zero=false  *Default value:* `8`\n- `minBandSize` :   (Number) The default min value for mapping quantitative fields to bar and tick's size/bandSize scale with zero=false.  *Default value:* `2`\n- `minOpacity` :   (Number) Default minimum opacity for mapping a field to opacity.  *Default value:* `0.3`\n- `maxOpacity` :   (Number) Default max opacity for mapping a field to opacity.  *Default value:* `0.8`\n- `bandPaddingInner` :   (Number) Default inner padding for `x` and `y` band-ordinal scales.  *Default value:* `0.1`\n- `bandPaddingOuter` :   (Number) Default outer padding for `x` and `y` band-ordinal scales. If not specified, by default, band scale's paddingOuter is paddingInner/2.\n- `minSize` :   (Number) Default minimum value for point size scale with zero=false.  *Default value:* `9`\n- `maxStrokeWidth` :   (Number) Default max strokeWidth for strokeWidth  (or rule/line's size) scale.  *Default value:* `4`\n\n## `vlscale` in `vlresolve()`\n- `shape` :  *see help for `vlshape()`*\n- `x` :  *see help for `vlx()`*\n- `color` :  *see help for `vlcolor()`*\n- `size` :  *see help for `vlsize()`*\n- `opacity` :  *see help for `vlopacity()`*\n- `y` :  *see help for `vly()`*\n\n## `vlscale` in `vly()`, `vlshape()`, `vlsize()`, `vlcolor()`, `vlx()`, `vlopacity()` and `vlunclear_what_to_do()`\n- `zero` :   (Bool) If `true`, ensures that a zero baseline value is included in the scale domain.  *Default value:* `true` for x and y channels if the quantitative field is not binned and no custom `domain` is provided; `false` otherwise.  *Note:* Log, time, and utc scales do not support `zero`.\n- `rangeStep` :   (Number or Void) The distance between the starts of adjacent bands or points in [band](scale.html#band) and [point](scale.html#point) scales.  If `rangeStep` is `null` or if the view contains the scale's corresponding [size](size.html) (`width` for `x` scales and `height` for `y` scales), `rangeStep` will be automatically determined to fit the size of the view.  *Default value:*  derived the [scale config](config.html#scale-config)'s `textXRangeStep` (`90` by default) for x-scales of `text` marks and `rangeStep` (`21` by default) for x-scales of other marks and y-scales.  *Warning*: If `rangeStep` is `null` and the cardinality of the scale's domain is higher than `width` or `height`, the rangeStep might become less than one pixel and the mark might not appear correctly.\n- `paddingOuter` :   (Number) The outer padding (spacing) at the ends of the range of band and point scales, as a fraction of the step size. This value must lie in the range [0,1].  *Default value:* derived from the [scale config](scale.html#config)'s `bandPaddingOuter` for band scales and `pointPadding` for point scales.\n- `padding` : For _[continuous](scale.html#continuous)_ scales, expands the scale domain to accommodate the specified number of pixels on each of the scale range. The scale range must represent pixels for this parameter to function as intended. Padding adjustment is performed prior to all other adjustments, including the effects of the zero, nice, domainMin, and domainMax properties.  For _[band](scale.html#band)_ scales, shortcut for setting `paddingInner` and `paddingOuter` to the same value.  For _[point](scale.html#point)_ scales, alias for `paddingOuter`.  *Default value:* For _continuous_ scales, derived from the [scale config](scale.html#config)'s `continuousPadding`. For _band and point_ scales, see `paddingInner` and `paddingOuter`. *see help for `vlpadding()`*\n- `range` : The range of the scale. One of:  - A string indicating a [pre-defined named scale range](scale.html#range-config) (e.g., example, `\"symbol\"`, or `\"diverging\"`).  - For [continuous scales](scale.html#continuous), two-element array indicating  minimum and maximum values, or an array with more than two entries for specifying a [piecewise scale](scale.html#piecewise).  - For [discrete](scale.html#discrete) and [discretizing](scale.html#discretizing) scales, an array of desired output values.  *Notes:*  1) For [sequential](scale.html#sequential), [ordinal](scale.html#ordinal), and discretizing color scales, you can also specify a color [`scheme`](scale.html#scheme) instead of `range`.  2) Any directly specified `range` for `x` and `y` channels will be ignored. Range can be customized via the view's corresponding [size](size.html) (`width` and `height`) or via [range steps and paddings properties](#range-step) for [band](#band) and [point](#point) scales. *see help for `vlrange()`*\n- `clamp` :   (Bool) If `true`, values that exceed the data domain are clamped to either the minimum or maximum range value  *Default value:* derived from the [scale config](config.html#scale-config)'s `clamp` (`true` by default).\n- `round` :   (Bool) If `true`, rounds numeric output values to integers. This can be helpful for snapping to the pixel grid.  *Default value:* `false`.\n- `scheme` : A string indicating a color [scheme](scale.html#scheme) name (e.g., `\"category10\"` or `\"viridis\"`) or a [scheme parameter object](scale.html#scheme-params).  Discrete color schemes may be used with [discrete](scale.html#discrete) or [discretizing](scale.html#discretizing) scales. Continuous color schemes are intended for use with [sequential](scales.html#sequential) scales.  For the full list of supported scheme, please refer to the [Vega Scheme](https://vega.github.io/vega/docs/schemes/#reference) reference. *see help for `vlscheme()`*\n- `nice` : Extending the domain so that it starts and ends on nice round values. This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value. Nicing is useful if the domain is computed from data and may be irregular. For example, for a domain of _[0.201479…, 0.996679…]_, a nice domain might be _[0.2, 1.0]_.  For quantitative scales such as linear, `nice` can be either a boolean flag or a number. If `nice` is a number, it will represent a desired tick count. This allows greater control over the step size used to extend the bounds, guaranteeing that the returned ticks will exactly cover the domain.  For temporal fields with time and utc scales, the `nice` value can be a string indicating the desired time interval. Legal values are `\"millisecond\"`, `\"second\"`, `\"minute\"`, `\"hour\"`, `\"day\"`, `\"week\"`, `\"month\"`, and `\"year\"`. Alternatively, `time` and `utc` scales can accept an object-valued interval specifier of the form `{\"interval\": \"month\", \"step\": 3}`, which includes a desired number of interval steps. Here, the domain would snap to quarter (Jan, Apr, Jul, Oct) boundaries.  *Default value:* `true` for unbinned _quantitative_ fields; `false` otherwise. *see help for `vlnice()`*\n- `exponent` :   (Number) The exponent of the `pow` scale.\n- `base` :   (Number) The logarithm base of the `log` scale (default `10`).\n- `interpolate` : The interpolation method for range values. By default, a general interpolator for numbers, dates, strings and colors (in RGB space) is used. For color ranges, this property allows interpolation in alternative color spaces. Legal values include `rgb`, `hsl`, `hsl-long`, `lab`, `hcl`, `hcl-long`, `cubehelix` and `cubehelix-long` ('-long' variants use longer paths in polar coordinate spaces). If object-valued, this property accepts an object with a string-valued _type_ property and an optional numeric _gamma_ property applicable to rgb and cubehelix interpolators. For more, see the [d3-interpolate documentation](https://github.com/d3/d3-interpolate).  *Note:* Sequential scales do not support `interpolate` as they have a fixed interpolator.  Since Vega-Lite uses sequential scales for quantitative fields by default, you have to set the scale `type` to other quantitative scale type such as `\"linear\"` to customize `interpolate`. *see help for `vlinterpolate()`*\n- `domain` : Customized domain values.  For _quantitative_ fields, `domain` can take the form of a two-element array with minimum and maximum values.  [Piecewise scales](scale.html#piecewise) can be created by providing a `domain` with more than two entries. If the input field is aggregated, `domain` can also be a string value `\"unaggregated\"`, indicating that the domain should include the raw data values prior to the aggregation.  For _temporal_ fields, `domain` can be a two-element array minimum and maximum values, in the form of either timestamps or the [DateTime definition objects](types.html#datetime).  For _ordinal_ and _nominal_ fields, `domain` can be an array that lists valid input values.  The `selection` property can be used to [interactively determine](selection.html#scale-domains) the scale domain. *see help for `vldomain()`*\n- `paddingInner` :   (Number) The inner padding (spacing) within each band step of band scales, as a fraction of the step size. This value must lie in the range [0,1].  For point scale, this property is invalid as point scales do not have internal band widths (only step sizes between bands).  *Default value:* derived from the [scale config](scale.html#config)'s `bandPaddingInner`.\n- `typ` :   (one of time,sqrt,ordinal,point,utc,sequential,linear,bin-ordinal,pow,log,bin-linear,band)\n" vlscale
@doc "## `vlvalues` in `vllegend()`\n(Array of ???)\n\n## `vlvalues` in `vldata()`\nOne of :\n\n- **case #1**\n\n- **case #2**\n  (Array of ???)\n\n## `vlvalues` in `vlaxis()`\n(Array of ???)\n" vlvalues
@doc "## `vltick` in `vlconfig()`\n- `tension` :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\n- `stroke` :   (String/Symbol) Default Stroke Color.  This has higher precedence than config.color  *Default value:* (None)\n- `thickness` :   (Number) Thickness of the tick mark.  *Default value:*  `1`\n- `dy` :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n- `fontSize` :   (Number) The font size, in pixels.\n- `strokeOpacity` :   (Number) The stroke opacity (value between [0,1]).  *Default value:* `1`\n- `angle` :   (Number) The rotation angle of the text, in degrees.\n- `orient` :   (one of horizontal,vertical)\n- `opacity` : The overall opacity (value between [0,1]).  *Default value:* `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise. *see help for `vlopacity()`*\n- `fontWeight` :   (one of normal,bold or Number) The font weight (e.g., `\"bold\"`).\n- `bandSize` :   (Number) The width of the ticks.  *Default value:*  2/3 of rangeStep.\n- `filled` :   (Bool) Whether the mark's color should be used as fill color instead of stroke color.  *Default value:* `true` for all marks except `point` and `false` for `point`.  *Applicable for:* `bar`, `point`, `circle`, `square`, and `area` marks.  *Note:* This property cannot be used in a [style config](mark.html#style-config).\n- `shape` : The default symbol shape to use. One of: `\"circle\"` (default), `\"square\"`, `\"cross\"`, `\"diamond\"`, `\"triangle-up\"`, or `\"triangle-down\"`, or a custom SVG path.  *Default value:* `\"circle\"` *see help for `vlshape()`*\n- `strokeDashOffset` :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\n- `theta` :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating \"north\".\n- `fontStyle` :   (one of normal,italic)\n- `font` :   (String/Symbol) The typeface to set the text in (e.g., `\"Helvetica Neue\"`).\n- `href` : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. *see help for `vlhref()`*\n- `fillOpacity` :   (Number) The fill opacity (value between [0,1]).  *Default value:* `1`\n- `dx` :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n- `fill` :   (String/Symbol) Default Fill Color.  This has higher precedence than config.color  *Default value:* (None)\n- `radius` :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.\n- `align` :   (one of left,right,center)\n- `strokeWidth` :   (Number) The stroke width, in pixels.\n- `size` : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  *Default value:* `30` *see help for `vlsize()`*\n- `cursor` :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.\n- `strokeDash` :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\n- `interpolate` :  *see help for `vlinterpolate()`*\n- `color` : Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.  *Default value:* <span style=\"color: #4682b4;\">&#9632;</span> `\"#4682b4\"`  *Note:* This property cannot be used in a [style config](mark.html#style-config). *see help for `vlcolor()`*\n- `text` : Placeholder text if the `text` channel is not specified *see help for `vltext()`*\n- `baseline` :   (one of bottom,top,middle)\n- `limit` :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\n" vltick
@doc "## `vltext` in `vlencoding()`\nOne of :\n\n- **case #1**\n  A FieldDef with Condition<ValueDef> {    condition: {value: ...},    field: ...,    ... }\n\n  - `format` : The [formatting pattern](https://vega.github.io/vega-lite/docs/format.html) for a text field. If not defined, this will be determined automatically. *see help for `vlformat()`*\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `condition` : One or more value definition(s) with a selection predicate.  *Note:* A field definition's `condition` property can only contain [value definitions](https://vega.github.io/vega-lite/docs/encoding.html#value-def) since Vega-Lite only allows at most one encoded field per encoding channel. *see help for `vlcondition()`*\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n\n- **case #2**\n  A ValueDef with Condition<ValueDef | FieldDef> {    condition: {field: ...} | {value: ...},    value: ..., }\n\n  - `condition` : A field definition or one or more value definition(s) with a selection predicate. *see help for `vlcondition()`*\n  - `value` :   (Number, String/Symbol or Bool) A constant value in visual domain.\n\n## `vltext` in `vlconfig()`\n- `tension` :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\n- `stroke` :   (String/Symbol) Default Stroke Color.  This has higher precedence than config.color  *Default value:* (None)\n- `shortTimeLabels` :   (Bool) Whether month names and weekday names should be abbreviated.\n- `dy` :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n- `fontSize` :   (Number) The font size, in pixels.\n- `strokeOpacity` :   (Number) The stroke opacity (value between [0,1]).  *Default value:* `1`\n- `angle` :   (Number) The rotation angle of the text, in degrees.\n- `orient` :   (one of horizontal,vertical)\n- `strokeDashOffset` :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\n- `opacity` : The overall opacity (value between [0,1]).  *Default value:* `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise. *see help for `vlopacity()`*\n- `fontWeight` :   (one of normal,bold or Number) The font weight (e.g., `\"bold\"`).\n- `filled` :   (Bool) Whether the mark's color should be used as fill color instead of stroke color.  *Default value:* `true` for all marks except `point` and `false` for `point`.  *Applicable for:* `bar`, `point`, `circle`, `square`, and `area` marks.  *Note:* This property cannot be used in a [style config](mark.html#style-config).\n- `shape` : The default symbol shape to use. One of: `\"circle\"` (default), `\"square\"`, `\"cross\"`, `\"diamond\"`, `\"triangle-up\"`, or `\"triangle-down\"`, or a custom SVG path.  *Default value:* `\"circle\"` *see help for `vlshape()`*\n- `theta` :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating \"north\".\n- `fontStyle` :   (one of normal,italic)\n- `font` :   (String/Symbol) The typeface to set the text in (e.g., `\"Helvetica Neue\"`).\n- `href` : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. *see help for `vlhref()`*\n- `fillOpacity` :   (Number) The fill opacity (value between [0,1]).  *Default value:* `1`\n- `dx` :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n- `fill` :   (String/Symbol) Default Fill Color.  This has higher precedence than config.color  *Default value:* (None)\n- `radius` :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.\n- `align` :   (one of left,right,center)\n- `strokeWidth` :   (Number) The stroke width, in pixels.\n- `size` : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  *Default value:* `30` *see help for `vlsize()`*\n- `cursor` :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.\n- `strokeDash` :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\n- `interpolate` :  *see help for `vlinterpolate()`*\n- `color` : Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.  *Default value:* <span style=\"color: #4682b4;\">&#9632;</span> `\"#4682b4\"`  *Note:* This property cannot be used in a [style config](mark.html#style-config). *see help for `vlcolor()`*\n- `text` : Placeholder text if the `text` channel is not specified *see help for `vltext()`*\n- `baseline` :   (one of bottom,top,middle)\n- `limit` :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\n" vltext
@doc "## `vlmulti` in `vlselection()`\n- `nearest` :   (Bool) When true, an invisible voronoi diagram is computed to accelerate discrete selection. The data value _nearest_ the mouse cursor is added to the selection.  See the [nearest transform](nearest.html) documentation for more information.\n- `fields` :   (Array of String/Symbol) An array of field names whose values must match for a data tuple to fall within the selection.\n- `on` :   (Any)\n- `encodings` :   (Array of one of x,row,opacity,column,shape,href,y,x2,tooltip,size,y2,color,text) An array of encoding channels. The corresponding data field values must match for a data tuple to fall within the selection.\n- `resolve` :  *see help for `vlresolve()`*\n- `toggle` :   (String/Symbol or Bool) Controls whether data values should be toggled or only ever inserted into multi selections. Can be `true`, `false` (for insertion only), or a [Vega expression](https://vega.github.io/vega/docs/expressions/).  *Default value:* `true`, which corresponds to `event.shiftKey` (i.e., data values are toggled when a user interacts with the shift-key pressed).  See the [toggle transform](toggle.html) documentation for more information.\n- `empty` :   (one of none,all) By default, all data values are considered to lie within an empty selection. When set to `none`, empty selections contain no data values.\n" vlmulti
@doc "## `vlcondition` in `vlhref()`\nOne of :\n\n- **case #1**\n  - `test` :  *see help for `vltest()`*\n  - `value` :   (Number, String/Symbol or Bool) A constant value in visual domain (e.g., `\"red\"` / \"#0099ff\" for color, values between `0` to `1` for opacity).\n\n- **case #2**\n  - `selection` :  *see help for `vlselection()`*\n  - `value` :   (Number, String/Symbol or Bool) A constant value in visual domain (e.g., `\"red\"` / \"#0099ff\" for color, values between `0` to `1` for opacity).\n\n- **case #3**\n  (Array of ???)\n\n- **case #4**\n  - `test` :  *see help for `vltest()`*\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n\n- **case #5**\n  - `selection` :  *see help for `vlselection()`*\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n\n- **case #6**\n  (Array of ???)\n\n## `vlcondition` in `vltext()` and `vltooltip()`\nOne of :\n\n- **case #1**\n  - `test` :  *see help for `vltest()`*\n  - `value` :   (Number, String/Symbol or Bool) A constant value in visual domain (e.g., `\"red\"` / \"#0099ff\" for color, values between `0` to `1` for opacity).\n\n- **case #2**\n  - `selection` :  *see help for `vlselection()`*\n  - `value` :   (Number, String/Symbol or Bool) A constant value in visual domain (e.g., `\"red\"` / \"#0099ff\" for color, values between `0` to `1` for opacity).\n\n- **case #3**\n  - `format` : The [formatting pattern](https://vega.github.io/vega-lite/docs/format.html) for a text field. If not defined, this will be determined automatically. *see help for `vlformat()`*\n  - `selection` :  *see help for `vlselection()`*\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n\n- **case #4**\n  (Array of ???)\n\n- **case #5**\n  (Array of ???)\n\n- **case #6**\n  - `format` : The [formatting pattern](https://vega.github.io/vega-lite/docs/format.html) for a text field. If not defined, this will be determined automatically. *see help for `vlformat()`*\n  - `test` :  *see help for `vltest()`*\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n\n## `vlcondition` in `vlshape()`, `vlsize()`, `vlcolor()` and `vlopacity()`\nOne of :\n\n- **case #1**\n  - `test` :  *see help for `vltest()`*\n  - `value` :   (Number, String/Symbol or Bool) A constant value in visual domain (e.g., `\"red\"` / \"#0099ff\" for color, values between `0` to `1` for opacity).\n\n- **case #2**\n  (Array of ???)\n\n- **case #3**\n  - `selection` :  *see help for `vlselection()`*\n  - `value` :   (Number, String/Symbol or Bool) A constant value in visual domain (e.g., `\"red\"` / \"#0099ff\" for color, values between `0` to `1` for opacity).\n\n- **case #4**\n  (Array of ???)\n\n- **case #5**\n  - `legend` : An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.  *Default value:* If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied. *see help for `vllegend()`*\n  - `test` :  *see help for `vltest()`*\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `sort` : Sort order for the encoded field. Supported `sort` values include `\"ascending\"`, `\"descending\"` and `null` (no sorting). For fields with discrete domains, `sort` can also be a [sort field definition object](https://vega.github.io/vega-lite/docs/sort.html#sort-field).  *Default value:* `\"ascending\"` *see help for `vlsort()`*\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `scale` :  *see help for `vlscale()`*\n\n- **case #6**\n  - `legend` : An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.  *Default value:* If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied. *see help for `vllegend()`*\n  - `selection` :  *see help for `vlselection()`*\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `sort` : Sort order for the encoded field. Supported `sort` values include `\"ascending\"`, `\"descending\"` and `null` (no sorting). For fields with discrete domains, `sort` can also be a [sort field definition object](https://vega.github.io/vega-lite/docs/sort.html#sort-field).  *Default value:* `\"ascending\"` *see help for `vlsort()`*\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `scale` :  *see help for `vlscale()`*\n" vlcondition
@doc "## `vlfrom` in `vltransform()`\n- `key` :   (String/Symbol) Key in data to lookup.\n- `fields` :   (Array of String/Symbol) Fields in foreign data to lookup. If not specified, the entire object is queried.\n- `data` :  *see help for `vldata()`*\n" vlfrom
@doc "## `vlbin` in `vlcolumn()`, `vlorder()`, `vlsize()`, `vltransform()`, `vly2()`, `vlunclear_what_to_do()`, `vlshape()`, `vlhref()`, `vltext()`, `vlopacity()`, `vlrow()`, `vltooltip()`, `vlx2()`, `vlx()`, `vlcolor()`, `vldetail()` and `vly()`\nBinning properties or boolean flag for determining whether to bin data or not.\n\n- `base` :   (Number) The number base to use for automatic bin determination (default is base 10).  *Default value:* `10`\n- `nice` : If true (the default), attempts to make the bin boundaries use human-friendly boundaries, such as multiples of ten. *see help for `vlnice()`*\n- `minstep` :   (Number) A minimum allowable step size (particularly useful for integer values).\n- `step` :   (Number) An exact step size to use between bins.  *Note:* If provided, options such as maxbins will be ignored.\n- `steps` :   (Array of Number) An array of allowable step sizes to choose from.\n- `divide` :   (Array of Number) Scale factors indicating allowable subdivisions. The default value is [5, 2], which indicates that for base 10 numbers (the default base), the method may consider dividing bin sizes by 5 and/or 2. For example, for an initial step size of 10, the method can check if bin sizes of 2 (= 10/5), 5 (= 10/2), or 1 (= 10/(5*2)) might also satisfy the given constraints.  *Default value:* `[5, 2]`\n- `extent` :   (Array of Number) A two-element (`[min, max]`) array indicating the range of desired bin values.\n- `maxbins` :   (Number) Maximum number of bins.  *Default value:* `6` for `row`, `column` and `shape` channels; `10` for other channels\n" vlbin
@doc "## `vlaxis` in `vlx()` and `vly()`\n- `labelBound` :   (Bool or Number) Indicates if labels should be hidden if they exceed the axis range. If `false `(the default) no bounds overlap analysis is performed. If `true`, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.  *Default value:* `false`.\n- `labelPadding` :   (Number) The padding, in pixels, between axis and text labels.\n- `titlePadding` :   (Number) The padding, in pixels, between title and axis.\n- `orient` :   (one of left,bottom,right,top)\n- `tickSize` :   (Number) The size in pixels of axis ticks.\n- `format` : The formatting pattern for labels. This is D3's [number format pattern](https://github.com/d3/d3-format#locale_format) for quantitative fields and D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format) for time field.  See the [format documentation](format.html) for more information.  *Default value:*  derived from [numberFormat](config.html#format) config for quantitative fields and from [timeFormat](config.html#format) config for temporal fields. *see help for `vlformat()`*\n- `labelAngle` :   (Number) The rotation angle of the axis labels.  *Default value:* `-90` for nominal and ordinal fields; `0` otherwise.\n- `minExtent` :   (Number) The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.  *Default value:* `30` for y-axis; `undefined` for x-axis.\n- `values` : Explicitly set the visible axis tick values. *see help for `vlvalues()`*\n- `tickCount` :   (Number) A desired number of ticks, for axes visualizing quantitative scales. The resulting number may be different so that values are \"nice\" (multiples of 2, 5, 10) and lie within the underlying scale's range.\n- `labelOverlap` :   (Bool, one of parity or one of greedy) The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `\"parity\"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `\"greedy\"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).  *Default value:* `true` for non-nominal fields with non-log scales; `\"greedy\"` for log scales; otherwise `false`.\n- `position` :   (Number) The anchor position of the axis in pixels. For x-axis with top or bottom orientation, this sets the axis group x coordinate. For y-axis with left or right orientation, this sets the axis group y coordinate.  *Default value*: `0`\n- `zindex` :   (Number) A non-positive integer indicating z-index of the axis. If zindex is 0, axes should be drawn behind all chart elements. To put them in front, use `\"zindex = 1\"`.  *Default value:* `1` (in front of the marks) for actual axis and `0` (behind the marks) for grids.\n- `titleMaxLength` :   (Number) Max length for axis title if the title is automatically generated from the field's description.\n- `offset` :   (Number) The offset, in pixels, by which to displace the axis from the edge of the enclosing group or data rectangle.  *Default value:* derived from the [axis config](config.html#facet-scale-config)'s `offset` (`0` by default)\n- `grid` :   (Bool) A boolean flag indicating if grid lines should be included as part of the axis  *Default value:* `true` for [continuous scales](scale.html#continuous) that are not binned; otherwise, `false`.\n- `domain` : A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.  *Default value:* `true` *see help for `vldomain()`*\n- `labels` :   (Bool) A boolean flag indicating if labels should be included as part of the axis.  *Default value:*  `true`.\n- `maxExtent` :   (Number) The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.  *Default value:* `undefined`.\n- `title` : A title for the field. If `null`, the title will be removed.  *Default value:*  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as a part of the title (e.g., `\"Sum of Profit\"`). If the field is binned or has a time unit applied, the applied function will be denoted in parentheses (e.g., `\"Profit (binned)\"`, `\"Transaction Date (year-month)\"`).  Otherwise, the title is simply the field name.  *Note*: You can customize the default field title format by providing the [`fieldTitle` property in the [config](config.html) or [`fieldTitle` function via the `compile` function's options](compile.html#field-title). *see help for `vltitle()`*\n- `labelFlush` :   (Bool or Number) Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.  *Default value:* `true` for axis of a continuous x-scale. Otherwise, `false`.\n- `ticks` :   (Bool) Boolean value that determines whether the axis should include ticks.\n\n## `vlaxis` in `vlconfig()`\n- `domainColor` :   (String/Symbol) Color of axis domain line.  *Default value:*  (none, using Vega default).\n- `labelBound` :   (Bool or Number) Indicates if labels should be hidden if they exceed the axis range. If `false `(the default) no bounds overlap analysis is performed. If `true`, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.  *Default value:* `false`.\n- `titleX` :   (Number) X-coordinate of the axis title relative to the axis group.\n- `labelPadding` :   (Number) The padding, in pixels, between axis and text labels.\n- `shortTimeLabels` :   (Bool) Whether month names and weekday names should be abbreviated.  *Default value:*  `false`\n- `tickRound` :   (Bool) Boolean flag indicating if pixel position values should be rounded to the nearest integer.\n- `tickWidth` :   (Number) The width, in pixels, of ticks.\n- `titlePadding` :   (Number) The padding, in pixels, between title and axis.\n- `tickSize` :   (Number) The size in pixels of axis ticks.\n- `labelAngle` :   (Number) The rotation angle of the axis labels.  *Default value:* `-90` for nominal and ordinal fields; `0` otherwise.\n- `minExtent` :   (Number) The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.  *Default value:* `30` for y-axis; `undefined` for x-axis.\n- `domainWidth` :   (Number) Stroke width of axis domain line  *Default value:*  (none, using Vega default).\n- `titleFontSize` :   (Number) Font size of the title.\n- `titleFontWeight` :   (String/Symbol or Number) Font weight of the title. (e.g., `\"bold\"`).\n- `labelOverlap` :   (Bool, one of parity or one of greedy) The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `\"parity\"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `\"greedy\"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).  *Default value:* `true` for non-nominal fields with non-log scales; `\"greedy\"` for log scales; otherwise `false`.\n- `titleFont` :   (String/Symbol) Font of the title. (e.g., `\"Helvetica Neue\"`).\n- `tickColor` :   (String/Symbol) The color of the axis's tick.\n- `gridOpacity` :   (Number) The stroke opacity of grid (value between [0,1])  *Default value:* (`1` by default)\n- `gridWidth` :   (Number) The grid width, in pixels.\n- `titleAngle` :   (Number) Angle in degrees of axis titles.\n- `titleMaxLength` :   (Number) Max length for axis title if the title is automatically generated from the field's description.\n- `titleLimit` :   (Number) Maximum allowed pixel width of axis titles.\n- `titleY` :   (Number) Y-coordinate of the axis title relative to the axis group.\n- `grid` :   (Bool) A boolean flag indicating if grid lines should be included as part of the axis  *Default value:* `true` for [continuous scales](scale.html#continuous) that are not binned; otherwise, `false`.\n- `gridColor` :   (String/Symbol) Color of gridlines.\n- `bandPosition` :   (Number) An interpolation fraction indicating where, for `band` scales, axis ticks should be positioned. A value of `0` places ticks at the left edge of their bands. A value of `0.5` places ticks in the middle of their bands.\n- `labelFont` :   (String/Symbol) The font of the tick label.\n- `titleAlign` :   (String/Symbol) Horizontal text alignment of axis titles.\n- `titleBaseline` :   (String/Symbol) Vertical text baseline for axis titles.\n- `gridDash` :   (Array of Number) The offset (in pixels) into which to begin drawing with the grid dash array.\n- `domain` : A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.  *Default value:* `true` *see help for `vldomain()`*\n- `labelFontSize` :   (Number) The font size of the label, in pixels.\n- `labels` :   (Bool) A boolean flag indicating if labels should be included as part of the axis.  *Default value:*  `true`.\n- `labelColor` :   (String/Symbol) The color of the tick label, can be in hex color code or regular color name.\n- `labelLimit` :   (Number) Maximum allowed pixel width of axis tick labels.\n- `maxExtent` :   (Number) The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.  *Default value:* `undefined`.\n- `labelFlush` :   (Bool or Number) Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.  *Default value:* `true` for axis of a continuous x-scale. Otherwise, `false`.\n- `ticks` :   (Bool) Boolean value that determines whether the axis should include ticks.\n- `titleColor` :   (String/Symbol) Color of the title, can be in hex color code or regular color name.\n\n## `vlaxis` in `vlresolve()`\n- `x` :  *see help for `vlx()`*\n- `y` :  *see help for `vly()`*\n" vlaxis
@doc "## `vlrow` in `vlencoding()`\n- `header` : Headers of row / column channels for faceted plots. *see help for `vlheader()`*\n- `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n- `timeUnit` :   (??? or ???)\n- `sort` :  *see help for `vlsort()`*\n- `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n- `aggregate` :  *see help for `vlaggregate()`*\n- `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n" vlrow
@doc "## `vlx2` in `vlencoding()`\nOne of :\n\n- **case #1**\n  Definition object for a data field, its type and transformation of an encoding channel.\n\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n\n- **case #2**\n  Definition object for a constant value of an encoding channel.\n\n  - `value` :   (Number, String/Symbol or Bool) A constant value in visual domain (e.g., `\"red\"` / \"#0099ff\" for color, values between `0` to `1` for opacity).\n" vlx2
@doc "## `plot`\nOne of :\n\n- **case #1**\n  - `data` :  *see help for `vldata()`*\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `spec` : A specification of the view that gets faceted. *see help for `vlspec()`*\n  - `padding` :  *see help for `vlpadding()`*\n  - `facet` :  *see help for `vlfacet()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `config` :  *see help for `vlconfig()`*\n  - `\$schema` :   (String/Symbol) URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v2.json`. Setting the `\$schema` property allows automatic validation and autocomplete in editors that support JSON schema.\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `autosize` : Sets how the visualization size should be determined. If a string, should be one of `\"pad\"`, `\"fit\"` or `\"none\"`. Object values can additionally specify parameters for content sizing and automatic resizing. `\"fit\"` is only supported for single and layered views that don't use `rangeStep`.  *Default value*: `pad` *see help for `vlautosize()`*\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n  - `background` :   (String/Symbol) CSS color property to use as the background of visualization.  *Default value:* none (transparent)\n\n- **case #2**\n  - `data` :  *see help for `vldata()`*\n  - `mark` :  *see help for `vlmark()`*\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `height` :   (Number) The height of a visualization.  *Default value:* - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its y-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - For y-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the height is [determined by the range step, paddings, and the cardinality of the field mapped to y-channel](https://vega.github.io/vega-lite/docs/scale.html#band). Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `y` channel, the `height` will be the value of `rangeStep`.  *Note*: For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `padding` :  *see help for `vlpadding()`*\n  - `encoding` :  *see help for `vlencoding()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `selection` : A key-value mapping between selection names and definitions. *see help for `vlselection()`*\n  - `config` :  *see help for `vlconfig()`*\n  - `width` :   (Number) The width of a visualization.  *Default value:* This will be determined by the following rules:  - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its x-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - For x-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the width is [determined by the range step, paddings, and the cardinality of the field mapped to x-channel](https://vega.github.io/vega-lite/docs/scale.html#band).   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](https://vega.github.io/vega-lite/docs/size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.  *Note:* For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `projection` :  *see help for `vlprojection()`*\n  - `\$schema` :   (String/Symbol) URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v2.json`. Setting the `\$schema` property allows automatic validation and autocomplete in editors that support JSON schema.\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `autosize` : Sets how the visualization size should be determined. If a string, should be one of `\"pad\"`, `\"fit\"` or `\"none\"`. Object values can additionally specify parameters for content sizing and automatic resizing. `\"fit\"` is only supported for single and layered views that don't use `rangeStep`.  *Default value*: `pad` *see help for `vlautosize()`*\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n  - `background` :   (String/Symbol) CSS color property to use as the background of visualization.  *Default value:* none (transparent)\n\n- **case #3**\n  - `data` :  *see help for `vldata()`*\n  - `repeat` :  *see help for `vlrepeat()`*\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `spec` :  *see help for `vlspec()`*\n  - `padding` :  *see help for `vlpadding()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `config` :  *see help for `vlconfig()`*\n  - `\$schema` :   (String/Symbol) URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v2.json`. Setting the `\$schema` property allows automatic validation and autocomplete in editors that support JSON schema.\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `autosize` : Sets how the visualization size should be determined. If a string, should be one of `\"pad\"`, `\"fit\"` or `\"none\"`. Object values can additionally specify parameters for content sizing and automatic resizing. `\"fit\"` is only supported for single and layered views that don't use `rangeStep`.  *Default value*: `pad` *see help for `vlautosize()`*\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n  - `background` :   (String/Symbol) CSS color property to use as the background of visualization.  *Default value:* none (transparent)\n\n- **case #4**\n  - `data` :  *see help for `vldata()`*\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `padding` :  *see help for `vlpadding()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `config` :  *see help for `vlconfig()`*\n  - `\$schema` :   (String/Symbol) URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v2.json`. Setting the `\$schema` property allows automatic validation and autocomplete in editors that support JSON schema.\n  - `hconcat` : A list of views that should be concatenated and put into a row. *see help for `vlhconcat()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `autosize` : Sets how the visualization size should be determined. If a string, should be one of `\"pad\"`, `\"fit\"` or `\"none\"`. Object values can additionally specify parameters for content sizing and automatic resizing. `\"fit\"` is only supported for single and layered views that don't use `rangeStep`.  *Default value*: `pad` *see help for `vlautosize()`*\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n  - `background` :   (String/Symbol) CSS color property to use as the background of visualization.  *Default value:* none (transparent)\n\n- **case #5**\n  - `vconcat` : A list of views that should be concatenated and put into a column. *see help for `vlvconcat()`*\n  - `data` :  *see help for `vldata()`*\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `padding` :  *see help for `vlpadding()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `config` :  *see help for `vlconfig()`*\n  - `\$schema` :   (String/Symbol) URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v2.json`. Setting the `\$schema` property allows automatic validation and autocomplete in editors that support JSON schema.\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `autosize` : Sets how the visualization size should be determined. If a string, should be one of `\"pad\"`, `\"fit\"` or `\"none\"`. Object values can additionally specify parameters for content sizing and automatic resizing. `\"fit\"` is only supported for single and layered views that don't use `rangeStep`.  *Default value*: `pad` *see help for `vlautosize()`*\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n  - `background` :   (String/Symbol) CSS color property to use as the background of visualization.  *Default value:* none (transparent)\n\n- **case #6**\n  - `data` :  *see help for `vldata()`*\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `height` :   (Number) The height of a visualization.  *Default value:* - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its y-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - For y-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the height is [determined by the range step, paddings, and the cardinality of the field mapped to y-channel](https://vega.github.io/vega-lite/docs/scale.html#band). Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `y` channel, the `height` will be the value of `rangeStep`.  *Note*: For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `padding` :  *see help for `vlpadding()`*\n  - `layer` : Layer or single view specifications to be layered.  *Note*: Specifications inside `layer` cannot use `row` and `column` channels as layering facet specifications is not allowed. *see help for `vllayer()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `config` :  *see help for `vlconfig()`*\n  - `width` :   (Number) The width of a visualization.  *Default value:* This will be determined by the following rules:  - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its x-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - For x-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the width is [determined by the range step, paddings, and the cardinality of the field mapped to x-channel](https://vega.github.io/vega-lite/docs/scale.html#band).   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](https://vega.github.io/vega-lite/docs/size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.  *Note:* For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `\$schema` :   (String/Symbol) URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v2.json`. Setting the `\$schema` property allows automatic validation and autocomplete in editors that support JSON schema.\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `autosize` : Sets how the visualization size should be determined. If a string, should be one of `\"pad\"`, `\"fit\"` or `\"none\"`. Object values can additionally specify parameters for content sizing and automatic resizing. `\"fit\"` is only supported for single and layered views that don't use `rangeStep`.  *Default value*: `pad` *see help for `vlautosize()`*\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n  - `background` :   (String/Symbol) CSS color property to use as the background of visualization.  *Default value:* none (transparent)\n" plot
@doc "## `vlprecision` in `vlprojection()`\nOne of :\n\n- **case #1**\n  Sets the threshold for the projection’s [adaptive resampling](http://bl.ocks.org/mbostock/3795544) to the specified value in pixels. This value corresponds to the [Douglas–Peucker distance](http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm). If precision is not specified, returns the projection’s current resampling precision which defaults to `√0.5 ≅ 0.70710…`.\n\n  - `length` :   (Number) Returns the length of a String object.\n\n- **case #2**\n  Sets the threshold for the projection’s [adaptive resampling](http://bl.ocks.org/mbostock/3795544) to the specified value in pixels. This value corresponds to the [Douglas–Peucker distance](http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm). If precision is not specified, returns the projection’s current resampling precision which defaults to `√0.5 ≅ 0.70710…`.\n\n  - `length` :   (Number) Returns the length of a String object.\n" vlprecision
@doc "## `vlfield` in `vlcolumn()`, `vlorder()`, `vlsize()`, `vlsort()`, `vly2()`, `vlunclear_what_to_do()`, `vlshape()`, `vlhref()`, `vltext()`, `vlopacity()`, `vlrow()`, `vltooltip()`, `vlx2()`, `vlx()`, `vlcolor()`, `vldetail()` and `vly()`\nReference to a repeated value.\n\n- `repeat` :  *see help for `vlrepeat()`*\n" vlfield
@doc "## `vldetail` in `vlencoding()`\nOne of :\n\n- **case #1**\n  Definition object for a data field, its type and transformation of an encoding channel.\n\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n\n- **case #2**\n  (Array of ???)\n\n- **case #3**\n  (Array of ???)\n" vldetail
@doc "## `vlnice` in `vlscale()`\n- `step` :   (Number)\n- `interval` :  *see help for `vlinterval()`*\n" vlnice
@doc "## `vlequal` in `vlunclear_what_to_do()`\nObject for defining datetime in Vega-Lite Filter. If both month and quarter are provided, month has higher precedence. `day` cannot be combined with other date. We accept string for month and day names.\n\n- `milliseconds` :   (Number) Integer value representing the millisecond segment of time.\n- `day` :   (Number or String/Symbol) Value representing the day of a week.  This can be one of: (1) integer value -- `1` represents Monday; (2) case-insensitive day name (e.g., `\"Monday\"`);  (3) case-insensitive, 3-character short day name (e.g., `\"Mon\"`).   <br/> **Warning:** A DateTime definition object with `day`** should not be combined with `year`, `quarter`, `month`, or `date`.\n- `hours` :   (Number) Integer value representing the hour of a day from 0-23.\n- `month` :   (Number or String/Symbol) One of: (1) integer value representing the month from `1`-`12`. `1` represents January;  (2) case-insensitive month name (e.g., `\"January\"`);  (3) case-insensitive, 3-character short month name (e.g., `\"Jan\"`).\n- `utc` :   (Bool) A boolean flag indicating if date time is in utc time. If false, the date time is in local time\n- `year` :   (Number) Integer value representing the year.\n- `minutes` :   (Number) Integer value representing the minute segment of time from 0-59.\n- `quarter` :   (Number) Integer value representing the quarter of the year (from 1-4).\n- `date` :   (Number) Integer value representing the date from 1-31.\n- `seconds` :   (Number) Integer value representing the second segment (0-59) of a time value\n" vlequal
@doc "## `vltest` in `vlunclear_what_to_do()`\nOne of :\n\n- **case #1**\n  (String/Symbol)\n\n- **case #2**\n  - `not` :   (Void)\n\n- **case #3**\n  - `timeUnit` :   (??? or ???)\n  - `equal` : The value that the field should be equal to. *see help for `vlequal()`*\n  - `field` : Field to be filtered. *see help for `vlfield()`*\n\n- **case #4**\n  - `range` : An array of inclusive minimum and maximum values for a field value of a data item to be included in the filtered data. *see help for `vlrange()`*\n  - `timeUnit` :   (??? or ???)\n  - `field` : Field to be filtered *see help for `vlfield()`*\n\n- **case #5**\n  - `or` :   (Array of Void)\n\n- **case #6**\n  - `and` :   (Array of Void)\n\n- **case #7**\n  - `selection` :  *see help for `vlselection()`*\n\n- **case #8**\n  - `timeUnit` :   (??? or ???)\n  - `field` : Field to be filtered *see help for `vlfield()`*\n  - `oneOf` : A set of values that the `field`'s value should be a member of, for a data item included in the filtered data. *see help for `vloneOf()`*\n" vltest
@doc "## `vlformat` in `vldata()`\nOne of :\n\n- **case #1**\n  - `mesh` :   (String/Symbol) The name of the TopoJSON object set to convert to mesh. Similar to the `feature` option, `mesh` extracts a named TopoJSON object set.   Unlike the `feature` option, the corresponding geo data is returned as a single, unified mesh instance, not as individual GeoJSON features. Extracting a mesh is useful for more efficiently drawing borders or other geographic elements that you do not need to associate with specific regions such as individual countries, states or counties.\n  - `feature` :   (String/Symbol) The name of the TopoJSON object set to convert to a GeoJSON feature collection. For example, in a map of the world, there may be an object set named `\"countries\"`. Using the feature property, we can extract this set and generate a GeoJSON feature object for each country.\n  - `typ` :   (one of topojson) Type of input data: `\"json\"`, `\"csv\"`, `\"tsv\"`. The default format type is determined by the extension of the file URL. If no extension is detected, `\"json\"` will be used by default.\n  - `parse` : If set to auto (the default), perform automatic type inference to determine the desired data types. Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `\"number\"`, `\"boolean\"` or `\"date\"`). For example, `\"parse\": {\"modified_on\": \"date\"}` parses the `modified_on` field in each input record a Date value.  For `\"date\"`, we parse data based using Javascript's [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse). For Specific date formats can be provided (e.g., `{foo: 'date:\"%m%d%Y\"'}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: 'utc:\"%m%d%Y\"'}`). See more about [UTC time](timeunit.html#utc) *see help for `vlparse()`*\n\n- **case #2**\n  - `property` :   (String/Symbol) The JSON property containing the desired data. This parameter can be used when the loaded JSON file may have surrounding structure or meta-data. For example `\"property\": \"values.features\"` is equivalent to retrieving `json.values.features` from the loaded JSON object.\n  - `typ` :   (one of json) Type of input data: `\"json\"`, `\"csv\"`, `\"tsv\"`. The default format type is determined by the extension of the file URL. If no extension is detected, `\"json\"` will be used by default.\n  - `parse` : If set to auto (the default), perform automatic type inference to determine the desired data types. Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `\"number\"`, `\"boolean\"` or `\"date\"`). For example, `\"parse\": {\"modified_on\": \"date\"}` parses the `modified_on` field in each input record a Date value.  For `\"date\"`, we parse data based using Javascript's [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse). For Specific date formats can be provided (e.g., `{foo: 'date:\"%m%d%Y\"'}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: 'utc:\"%m%d%Y\"'}`). See more about [UTC time](timeunit.html#utc) *see help for `vlparse()`*\n\n- **case #3**\n  - `typ` :   (one of tsv,csv) Type of input data: `\"json\"`, `\"csv\"`, `\"tsv\"`. The default format type is determined by the extension of the file URL. If no extension is detected, `\"json\"` will be used by default.\n  - `parse` : If set to auto (the default), perform automatic type inference to determine the desired data types. Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `\"number\"`, `\"boolean\"` or `\"date\"`). For example, `\"parse\": {\"modified_on\": \"date\"}` parses the `modified_on` field in each input record a Date value.  For `\"date\"`, we parse data based using Javascript's [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse). For Specific date formats can be provided (e.g., `{foo: 'date:\"%m%d%Y\"'}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: 'utc:\"%m%d%Y\"'}`). See more about [UTC time](timeunit.html#utc) *see help for `vlparse()`*\n" vlformat
@doc "## `vlcolumn` in `vlfacet()`\n- `header` : Headers of row / column channels for faceted plots. *see help for `vlheader()`*\n- `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n- `timeUnit` :   (??? or ???)\n- `sort` :  *see help for `vlsort()`*\n- `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n- `aggregate` :  *see help for `vlaggregate()`*\n- `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n" vlcolumn
@doc "## `vldomain` in `vlscale()`\nOne of :\n\n- **case #1**\n  (Array of ???)\n\n- **case #2**\n  - `selection` : The name of a selection. *see help for `vlselection()`*\n  - `encoding` : The encoding channel to extract selected values for, when a selection is [projected](project.html) over multiple fields or encodings. *see help for `vlencoding()`*\n\n- **case #3**\n  - `selection` : The name of a selection. *see help for `vlselection()`*\n  - `field` : The field name to extract selected values for, when a selection is [projected](project.html) over multiple fields or encodings. *see help for `vlfield()`*\n" vldomain
@doc "## `vlshape` in `vlencoding()`\nOne of :\n\n- **case #1**\n  A ValueDef with Condition<ValueDef | FieldDef> {    condition: {field: ...} | {value: ...},    value: ..., }\n\n  - `condition` : A field definition or one or more value definition(s) with a selection predicate. *see help for `vlcondition()`*\n  - `value` :   (Number, String/Symbol or Bool) A constant value in visual domain.\n\n- **case #2**\n  A FieldDef with Condition<ValueDef> {    condition: {value: ...},    field: ...,    ... }\n\n  - `legend` : An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.  *Default value:* If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied. *see help for `vllegend()`*\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `sort` : Sort order for the encoded field. Supported `sort` values include `\"ascending\"`, `\"descending\"` and `null` (no sorting). For fields with discrete domains, `sort` can also be a [sort field definition object](https://vega.github.io/vega-lite/docs/sort.html#sort-field).  *Default value:* `\"ascending\"` *see help for `vlsort()`*\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `condition` : One or more value definition(s) with a selection predicate.  *Note:* A field definition's `condition` property can only contain [value definitions](https://vega.github.io/vega-lite/docs/encoding.html#value-def) since Vega-Lite only allows at most one encoded field per encoding channel. *see help for `vlcondition()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `scale` :  *see help for `vlscale()`*\n" vlshape
@doc "## `vltitle` in `vlconfig()`\n- `baseline` :   (one of bottom,top,middle)\n- `fontWeight` :   (one of normal,bold or Number) Font weight for title text.\n- `offset` :   (Number) Offset in pixels of the title from the chart body and axes.\n- `anchor` :   (one of start,middle,end)\n- `color` : Text color for title text. *see help for `vlcolor()`*\n- `font` :   (String/Symbol) Font name for title text.\n- `fontSize` :   (Number) Font size in pixels for title text.  *Default value:* `10`.\n- `angle` :   (Number) Angle in degrees of title text.\n- `orient` :   (one of left,bottom,right,top)\n- `limit` :   (Number) The maximum allowed length in pixels of legend labels.\n\n## `vltitle` in `vllayer()`, `plot()` and `vlspec()`\n- `offset` :   (Number) The orthogonal offset in pixels by which to displace the title from its position along the edge of the chart.\n- `style` : A [mark style property](config.html#style) to apply to the title text mark.  *Default value:* `\"group-title\"`. *see help for `vlstyle()`*\n- `anchor` :   (one of start,middle,end)\n- `text` : The title text. *see help for `vltext()`*\n- `orient` :   (one of left,bottom,right,top)\n" vltitle
@doc "## `vlhref` in `vlencoding()`\nOne of :\n\n- **case #1**\n  A FieldDef with Condition<ValueDef> {    condition: {value: ...},    field: ...,    ... }\n\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `condition` : One or more value definition(s) with a selection predicate.  *Note:* A field definition's `condition` property can only contain [value definitions](https://vega.github.io/vega-lite/docs/encoding.html#value-def) since Vega-Lite only allows at most one encoded field per encoding channel. *see help for `vlcondition()`*\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n\n- **case #2**\n  A ValueDef with Condition<ValueDef | FieldDef> {    condition: {field: ...} | {value: ...},    value: ..., }\n\n  - `condition` : A field definition or one or more value definition(s) with a selection predicate. *see help for `vlcondition()`*\n  - `value` :   (Number, String/Symbol or Bool) A constant value in visual domain.\n" vlhref
@doc "## `vloneOf` in `vlunclear_what_to_do()`\n(Array of ???)\n" vloneOf
@doc "## `vlopacity` in `vlencoding()`\nOne of :\n\n- **case #1**\n  A ValueDef with Condition<ValueDef | FieldDef> {    condition: {field: ...} | {value: ...},    value: ..., }\n\n  - `condition` : A field definition or one or more value definition(s) with a selection predicate. *see help for `vlcondition()`*\n  - `value` :   (Number, String/Symbol or Bool) A constant value in visual domain.\n\n- **case #2**\n  A FieldDef with Condition<ValueDef> {    condition: {value: ...},    field: ...,    ... }\n\n  - `legend` : An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.  *Default value:* If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied. *see help for `vllegend()`*\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `sort` : Sort order for the encoded field. Supported `sort` values include `\"ascending\"`, `\"descending\"` and `null` (no sorting). For fields with discrete domains, `sort` can also be a [sort field definition object](https://vega.github.io/vega-lite/docs/sort.html#sort-field).  *Default value:* `\"ascending\"` *see help for `vlsort()`*\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `condition` : One or more value definition(s) with a selection predicate.  *Note:* A field definition's `condition` property can only contain [value definitions](https://vega.github.io/vega-lite/docs/encoding.html#value-def) since Vega-Lite only allows at most one encoded field per encoding channel. *see help for `vlcondition()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `scale` :  *see help for `vlscale()`*\n" vlopacity
@doc "## `vlbind` in `vlsingle()`\nOne of :\n\n- **case #1**\n  - `options` :   (Array of String/Symbol)\n  - `element` :   (String/Symbol)\n  - `input` :   (one of select)\n\n- **case #2**\n  - `element` :   (String/Symbol)\n  - `step` :   (Number)\n  - `max` :   (Number)\n  - `min` :   (Number)\n  - `input` :   (one of range)\n\n- **case #3**\n  - `options` :   (Array of String/Symbol)\n  - `element` :   (String/Symbol)\n  - `input` :   (one of radio)\n\n- **case #4**\n  - `element` :   (String/Symbol)\n  - `input` :   (one of checkbox)\n\n- **case #5**\n  - `element` :   (String/Symbol)\n  - `input` :   (String/Symbol)\n\n- **case #6**\n" vlbind
@doc "## `vlinterval` in `vlselection()`\n- `translate` :   (String/Symbol or Bool) When truthy, allows a user to interactively move an interval selection back-and-forth. Can be `true`, `false` (to disable panning), or a [Vega event stream definition](https://vega.github.io/vega/docs/event-streams/) which must include a start and end event to trigger continuous panning.  *Default value:* `true`, which corresponds to `[mousedown, window:mouseup] > window:mousemove!` which corresponds to clicks and dragging within an interval selection to reposition it.\n- `fields` :   (Array of String/Symbol) An array of field names whose values must match for a data tuple to fall within the selection.\n- `bind` : Establishes a two-way binding between the interval selection and the scales used within the same view. This allows a user to interactively pan and zoom the view. *see help for `vlbind()`*\n- `on` :   (Any)\n- `encodings` :   (Array of one of x,row,opacity,column,shape,href,y,x2,tooltip,size,y2,color,text) An array of encoding channels. The corresponding data field values must match for a data tuple to fall within the selection.\n- `zoom` :   (String/Symbol or Bool) When truthy, allows a user to interactively resize an interval selection. Can be `true`, `false` (to disable zooming), or a [Vega event stream definition](https://vega.github.io/vega/docs/event-streams/). Currently, only `wheel` events are supported.   *Default value:* `true`, which corresponds to `wheel!`.\n- `mark` :  *see help for `vlmark()`*\n- `resolve` :  *see help for `vlresolve()`*\n- `empty` :   (one of none,all) By default, all data values are considered to lie within an empty selection. When set to `none`, empty selections contain no data values.\n" vlinterval
@doc "## `vlview` in `vlconfig()`\n- `strokeDash` :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.  *Default value:* (none)\n- `height` :   (Number) The default height of the single plot or each plot in a trellis plot when the visualization has a continuous (non-ordinal) y-scale with `rangeStep` = `null`.  *Default value:* `200`\n- `stroke` :   (String/Symbol) The stroke color.  *Default value:* (none)\n- `clip` :   (Bool) Whether the view should be clipped.\n- `strokeWidth` :   (Number) The stroke width, in pixels.  *Default value:* (none)\n- `fillOpacity` :   (Number) The fill opacity (value between [0,1]).  *Default value:* (none)\n- `fill` :   (String/Symbol) The fill color.  *Default value:* (none)\n- `strokeOpacity` :   (Number) The stroke opacity (value between [0,1]).  *Default value:* (none)\n- `width` :   (Number) The default width of the single plot or each plot in a trellis plot when the visualization has a continuous (non-ordinal) x-scale or ordinal x-scale with `rangeStep` = `null`.  *Default value:* `200`\n- `strokeDashOffset` :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.  *Default value:* (none)\n" vlview
@doc "## `vlcolor` in `vlencoding()`\nOne of :\n\n- **case #1**\n  A ValueDef with Condition<ValueDef | FieldDef> {    condition: {field: ...} | {value: ...},    value: ..., }\n\n  - `condition` : A field definition or one or more value definition(s) with a selection predicate. *see help for `vlcondition()`*\n  - `value` :   (Number, String/Symbol or Bool) A constant value in visual domain.\n\n- **case #2**\n  A FieldDef with Condition<ValueDef> {    condition: {value: ...},    field: ...,    ... }\n\n  - `legend` : An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.  *Default value:* If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied. *see help for `vllegend()`*\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `sort` : Sort order for the encoded field. Supported `sort` values include `\"ascending\"`, `\"descending\"` and `null` (no sorting). For fields with discrete domains, `sort` can also be a [sort field definition object](https://vega.github.io/vega-lite/docs/sort.html#sort-field).  *Default value:* `\"ascending\"` *see help for `vlsort()`*\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `condition` : One or more value definition(s) with a selection predicate.  *Note:* A field definition's `condition` property can only contain [value definitions](https://vega.github.io/vega-lite/docs/encoding.html#value-def) since Vega-Lite only allows at most one encoded field per encoding channel. *see help for `vlcondition()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `scale` :  *see help for `vlscale()`*\n" vlcolor
@doc "## `vlscheme` in `vlscale()`\n- `name` :   (String/Symbol) A color scheme name for sequential/ordinal scales (e.g., `\"category10\"` or `\"viridis\"`).  For the full list of supported scheme, please refer to the [Vega Scheme](https://vega.github.io/vega/docs/schemes/#reference) reference.\n- `extent` :   (Array of Number) For sequential and diverging schemes only, determines the extent of the color range to use. For example `[0.2, 1]` will rescale the color scheme such that color values in the range _[0, 0.2)_ are excluded from the scheme.\n" vlscheme
@doc "## `vly` in `vlencoding()`\nOne of :\n\n- **case #1**\n  Definition object for a constant value of an encoding channel.\n\n  - `value` :   (Number, String/Symbol or Bool) A constant value in visual domain (e.g., `\"red\"` / \"#0099ff\" for color, values between `0` to `1` for opacity).\n\n- **case #2**\n  - `axis` : An object defining properties of axis's gridlines, ticks and labels. If `null`, the axis for the encoding channel will be removed.  *Default value:* If undefined, default [axis properties](https://vega.github.io/vega-lite/docs/axis.html) are applied. *see help for `vlaxis()`*\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `sort` : Sort order for the encoded field. Supported `sort` values include `\"ascending\"`, `\"descending\"` and `null` (no sorting). For fields with discrete domains, `sort` can also be a [sort field definition object](https://vega.github.io/vega-lite/docs/sort.html#sort-field).  *Default value:* `\"ascending\"` *see help for `vlsort()`*\n  - `stack` :   (one of zero,normalize,center or Void) Type of stacking offset if the field should be stacked. `stack` is only applicable for `x` and `y` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.  `stack` can be one of the following values: - `\"zero\"`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart). - `\"normalize\"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/> -`\"center\"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)). - `null` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.  *Default value:* `zero` for plots with all of the following conditions are true: (1) the mark is `bar` or `area`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y.  Otherwise, `null` by default.\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `timeUnit` :   (??? or ???)\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `scale` :  *see help for `vlscale()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n" vly
@doc "## `vldiverging` in `vlrange()`\n- `count` :   (Number)\n- `extent` :   (Array of Number)\n- `scheme` :  *see help for `vlscheme()`*\n" vldiverging
@doc "## `vlorder` in `vlencoding()`\nOne of :\n\n- **case #1**\n  (Array of ???)\n\n- **case #2**\n  (Array of ???)\n\n- **case #3**\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `sort` :  *see help for `vlsort()`*\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n" vlorder
@doc "## `vlmark` in `vlconfig()`\n- `tension` :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\n- `stroke` :   (String/Symbol) Default Stroke Color.  This has higher precedence than config.color  *Default value:* (None)\n- `dy` :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n- `fontSize` :   (Number) The font size, in pixels.\n- `strokeOpacity` :   (Number) The stroke opacity (value between [0,1]).  *Default value:* `1`\n- `angle` :   (Number) The rotation angle of the text, in degrees.\n- `orient` :   (one of horizontal,vertical)\n- `strokeDashOffset` :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\n- `opacity` : The overall opacity (value between [0,1]).  *Default value:* `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise. *see help for `vlopacity()`*\n- `fontWeight` :   (one of normal,bold or Number) The font weight (e.g., `\"bold\"`).\n- `filled` :   (Bool) Whether the mark's color should be used as fill color instead of stroke color.  *Default value:* `true` for all marks except `point` and `false` for `point`.  *Applicable for:* `bar`, `point`, `circle`, `square`, and `area` marks.  *Note:* This property cannot be used in a [style config](mark.html#style-config).\n- `shape` : The default symbol shape to use. One of: `\"circle\"` (default), `\"square\"`, `\"cross\"`, `\"diamond\"`, `\"triangle-up\"`, or `\"triangle-down\"`, or a custom SVG path.  *Default value:* `\"circle\"` *see help for `vlshape()`*\n- `theta` :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating \"north\".\n- `fontStyle` :   (one of normal,italic)\n- `font` :   (String/Symbol) The typeface to set the text in (e.g., `\"Helvetica Neue\"`).\n- `href` : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. *see help for `vlhref()`*\n- `fillOpacity` :   (Number) The fill opacity (value between [0,1]).  *Default value:* `1`\n- `dx` :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n- `fill` :   (String/Symbol) Default Fill Color.  This has higher precedence than config.color  *Default value:* (None)\n- `radius` :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.\n- `align` :   (one of left,right,center)\n- `strokeWidth` :   (Number) The stroke width, in pixels.\n- `size` : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  *Default value:* `30` *see help for `vlsize()`*\n- `cursor` :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.\n- `strokeDash` :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\n- `interpolate` :  *see help for `vlinterpolate()`*\n- `color` : Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.  *Default value:* <span style=\"color: #4682b4;\">&#9632;</span> `\"#4682b4\"`  *Note:* This property cannot be used in a [style config](mark.html#style-config). *see help for `vlcolor()`*\n- `text` : Placeholder text if the `text` channel is not specified *see help for `vltext()`*\n- `baseline` :   (one of bottom,top,middle)\n- `limit` :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\n\n## `vlmark` in `vllayer()`, `plot()` and `vlspec()`\n- `tension` :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\n- `stroke` :   (String/Symbol) Default Stroke Color.  This has higher precedence than config.color  *Default value:* (None)\n- `dy` :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n- `fontSize` :   (Number) The font size, in pixels.\n- `strokeOpacity` :   (Number) The stroke opacity (value between [0,1]).  *Default value:* `1`\n- `angle` :   (Number) The rotation angle of the text, in degrees.\n- `orient` :   (one of horizontal,vertical)\n- `strokeDashOffset` :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\n- `opacity` : The overall opacity (value between [0,1]).  *Default value:* `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise. *see help for `vlopacity()`*\n- `fontWeight` :   (one of normal,bold or Number) The font weight (e.g., `\"bold\"`).\n- `filled` :   (Bool) Whether the mark's color should be used as fill color instead of stroke color.  *Default value:* `true` for all marks except `point` and `false` for `point`.  *Applicable for:* `bar`, `point`, `circle`, `square`, and `area` marks.  *Note:* This property cannot be used in a [style config](mark.html#style-config).\n- `shape` : The default symbol shape to use. One of: `\"circle\"` (default), `\"square\"`, `\"cross\"`, `\"diamond\"`, `\"triangle-up\"`, or `\"triangle-down\"`, or a custom SVG path.  *Default value:* `\"circle\"` *see help for `vlshape()`*\n- `theta` :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating \"north\".\n- `fontStyle` :   (one of normal,italic)\n- `font` :   (String/Symbol) The typeface to set the text in (e.g., `\"Helvetica Neue\"`).\n- `href` : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. *see help for `vlhref()`*\n- `fillOpacity` :   (Number) The fill opacity (value between [0,1]).  *Default value:* `1`\n- `dx` :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n- `fill` :   (String/Symbol) Default Fill Color.  This has higher precedence than config.color  *Default value:* (None)\n- `radius` :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.\n- `align` :   (one of left,right,center)\n- `clip` :   (Bool) Whether a mark be clipped to the enclosing group’s width and height.\n- `style` : A string or array of strings indicating the name of custom styles to apply to the mark. A style is a named collection of mark property defaults defined within the [style configuration](mark.html#style-config). If style is an array, later styles will override earlier styles. Any [mark properties](encoding.html#mark-prop) explicitly defined within the `encoding` will override a style default.  *Default value:* The mark's name.  For example, a bar mark will have style `\"bar\"` by default. *Note:* Any specified style will augment the default style. For example, a bar mark with `\"style\": \"foo\"` will receive from `config.style.bar` and `config.style.foo` (the specified style `\"foo\"` has higher precedence). *see help for `vlstyle()`*\n- `strokeWidth` :   (Number) The stroke width, in pixels.\n- `size` : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  *Default value:* `30` *see help for `vlsize()`*\n- `cursor` :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.\n- `strokeDash` :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\n- `interpolate` :  *see help for `vlinterpolate()`*\n- `color` : Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.  *Default value:* <span style=\"color: #4682b4;\">&#9632;</span> `\"#4682b4\"`  *Note:* This property cannot be used in a [style config](mark.html#style-config). *see help for `vlcolor()`*\n- `text` : Placeholder text if the `text` channel is not specified *see help for `vltext()`*\n- `baseline` :   (one of bottom,top,middle)\n- `typ` :   (one of tick,bar,square,point,line,rect,area,circle,rule,text,geoshape) All types of primitive marks.\n- `limit` :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\n\n## `vlmark` in `vlinterval()`\n- `strokeDash` :   (Array of Number) An array of alternating stroke and space lengths, for creating dashed or dotted lines.\n- `stroke` :   (String/Symbol) The stroke color of the interval mark.  *Default value:* `#ffffff`\n- `strokeWidth` :   (Number) The stroke width of the interval mark.\n- `fillOpacity` :   (Number) The fill opacity of the interval mark (a value between 0 and 1).  *Default value:* `0.125`\n- `fill` :   (String/Symbol) The fill color of the interval mark.  *Default value:* `#333333`\n- `strokeOpacity` :   (Number) The stroke opacity of the interval mark (a value between 0 and 1).\n- `strokeDashOffset` :   (Number) The offset (in pixels) with which to begin drawing the stroke dash array.\n" vlmark
@doc "## `vldata` in `vlfrom()`, `vllayer()`, `plot()` and `vlspec()`\nOne of :\n\n- **case #1**\n  - `format` :  *see help for `vlformat()`*\n  - `url` :   (String/Symbol) An URL from which to load the data set. Use the `format.type` property to ensure the loaded data is correctly parsed.\n\n- **case #2**\n  - `format` :  *see help for `vlformat()`*\n  - `values` : The full data set, included inline. This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property. Strings are parsed according to the specified format type. *see help for `vlvalues()`*\n\n- **case #3**\n  - `name` :   (String/Symbol) Provide a placeholder name and bind data at runtime.\n  - `format` :  *see help for `vlformat()`*\n" vldata
@doc "## `vlvconcat` in `plot()`\nOne of :\n\n- **case #1**\n  - `data` :  *see help for `vldata()`*\n  - `mark` :  *see help for `vlmark()`*\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `height` :   (Number) The height of a visualization.  *Default value:* - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its y-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - For y-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the height is [determined by the range step, paddings, and the cardinality of the field mapped to y-channel](https://vega.github.io/vega-lite/docs/scale.html#band). Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `y` channel, the `height` will be the value of `rangeStep`.  *Note*: For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `encoding` :  *see help for `vlencoding()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `selection` : A key-value mapping between selection names and definitions. *see help for `vlselection()`*\n  - `width` :   (Number) The width of a visualization.  *Default value:* This will be determined by the following rules:  - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its x-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - For x-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the width is [determined by the range step, paddings, and the cardinality of the field mapped to x-channel](https://vega.github.io/vega-lite/docs/scale.html#band).   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](https://vega.github.io/vega-lite/docs/size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.  *Note:* For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `projection` :  *see help for `vlprojection()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n\n- **case #2**\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `spec` : A specification of the view that gets faceted. *see help for `vlspec()`*\n  - `data` :  *see help for `vldata()`*\n  - `facet` :  *see help for `vlfacet()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n\n- **case #3**\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `spec` :  *see help for `vlspec()`*\n  - `data` :  *see help for `vldata()`*\n  - `repeat` :  *see help for `vlrepeat()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n\n- **case #4**\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `hconcat` : A list of views that should be concatenated and put into a row. *see help for `vlhconcat()`*\n  - `data` :  *see help for `vldata()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n\n- **case #5**\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `height` :   (Number) The height of a visualization.  *Default value:* - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its y-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - For y-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the height is [determined by the range step, paddings, and the cardinality of the field mapped to y-channel](https://vega.github.io/vega-lite/docs/scale.html#band). Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `y` channel, the `height` will be the value of `rangeStep`.  *Note*: For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `layer` : Layer or single view specifications to be layered.  *Note*: Specifications inside `layer` cannot use `row` and `column` channels as layering facet specifications is not allowed. *see help for `vllayer()`*\n  - `data` :  *see help for `vldata()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `width` :   (Number) The width of a visualization.  *Default value:* This will be determined by the following rules:  - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its x-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - For x-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the width is [determined by the range step, paddings, and the cardinality of the field mapped to x-channel](https://vega.github.io/vega-lite/docs/scale.html#band).   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](https://vega.github.io/vega-lite/docs/size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.  *Note:* For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n\n- **case #6**\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `vconcat` : A list of views that should be concatenated and put into a column. *see help for `vlvconcat()`*\n  - `data` :  *see help for `vldata()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n" vlvconcat
@doc "## `vlunclear_what_to_do`\nOne of :\n\n- **case #1**\n  - `legend` : An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.  *Default value:* If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied. *see help for `vllegend()`*\n  - `test` :  *see help for `vltest()`*\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `sort` : Sort order for the encoded field. Supported `sort` values include `\"ascending\"`, `\"descending\"` and `null` (no sorting). For fields with discrete domains, `sort` can also be a [sort field definition object](https://vega.github.io/vega-lite/docs/sort.html#sort-field).  *Default value:* `\"ascending\"` *see help for `vlsort()`*\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `scale` :  *see help for `vlscale()`*\n\n- **case #2**\n  - `format` : The [formatting pattern](https://vega.github.io/vega-lite/docs/format.html) for a text field. If not defined, this will be determined automatically. *see help for `vlformat()`*\n  - `selection` :  *see help for `vlselection()`*\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n\n- **case #3**\n  - `selection` :  *see help for `vlselection()`*\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n\n- **case #4**\n  - `element` :   (String/Symbol)\n  - `step` :   (Number)\n  - `max` :   (Number)\n  - `min` :   (Number)\n  - `input` :   (one of range)\n\n- **case #5**\n  - `selection` : The name of a selection. *see help for `vlselection()`*\n  - `encoding` : The encoding channel to extract selected values for, when a selection is [projected](project.html) over multiple fields or encodings. *see help for `vlencoding()`*\n\n- **case #6**\n  - `format` : The [formatting pattern](https://vega.github.io/vega-lite/docs/format.html) for a text field. If not defined, this will be determined automatically. *see help for `vlformat()`*\n  - `test` :  *see help for `vltest()`*\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n\n- **case #7**\n  - `selection` :  *see help for `vlselection()`*\n\n- **case #8**\n  - `element` :   (String/Symbol)\n  - `input` :   (one of checkbox)\n\n- **case #9**\n  - `timeUnit` :   (??? or ???)\n  - `field` : Field to be filtered *see help for `vlfield()`*\n  - `oneOf` : A set of values that the `field`'s value should be a member of, for a data item included in the filtered data. *see help for `vloneOf()`*\n\n- **case #10**\n  - `legend` : An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.  *Default value:* If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied. *see help for `vllegend()`*\n  - `selection` :  *see help for `vlselection()`*\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `sort` : Sort order for the encoded field. Supported `sort` values include `\"ascending\"`, `\"descending\"` and `null` (no sorting). For fields with discrete domains, `sort` can also be a [sort field definition object](https://vega.github.io/vega-lite/docs/sort.html#sort-field).  *Default value:* `\"ascending\"` *see help for `vlsort()`*\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `scale` :  *see help for `vlscale()`*\n\n- **case #11**\n  - `test` :  *see help for `vltest()`*\n  - `value` :   (Number, String/Symbol or Bool) A constant value in visual domain (e.g., `\"red\"` / \"#0099ff\" for color, values between `0` to `1` for opacity).\n\n- **case #12**\n  - `selection` :  *see help for `vlselection()`*\n  - `value` :   (Number, String/Symbol or Bool) A constant value in visual domain (e.g., `\"red\"` / \"#0099ff\" for color, values between `0` to `1` for opacity).\n\n- **case #13**\n  - `options` :   (Array of String/Symbol)\n  - `element` :   (String/Symbol)\n  - `input` :   (one of select)\n\n- **case #14**\n  - `test` :  *see help for `vltest()`*\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n\n- **case #15**\n  - `options` :   (Array of String/Symbol)\n  - `element` :   (String/Symbol)\n  - `input` :   (one of radio)\n\n- **case #16**\n  - `element` :   (String/Symbol)\n  - `input` :   (String/Symbol)\n\n- **case #17**\n  - `selection` : The name of a selection. *see help for `vlselection()`*\n  - `field` : The field name to extract selected values for, when a selection is [projected](project.html) over multiple fields or encodings. *see help for `vlfield()`*\n\n- **case #18**\n  - `timeUnit` :   (??? or ???)\n  - `equal` : The value that the field should be equal to. *see help for `vlequal()`*\n  - `field` : Field to be filtered. *see help for `vlfield()`*\n\n- **case #19**\n  - `range` : An array of inclusive minimum and maximum values for a field value of a data item to be included in the filtered data. *see help for `vlrange()`*\n  - `timeUnit` :   (??? or ???)\n  - `field` : Field to be filtered *see help for `vlfield()`*\n" vlunclear_what_to_do
@doc "## `vllayer` in `vllayer()`, `plot()` and `vlspec()`\nOne of :\n\n- **case #1**\n  - `data` :  *see help for `vldata()`*\n  - `mark` :  *see help for `vlmark()`*\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `height` :   (Number) The height of a visualization.  *Default value:* - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its y-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - For y-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the height is [determined by the range step, paddings, and the cardinality of the field mapped to y-channel](https://vega.github.io/vega-lite/docs/scale.html#band). Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `y` channel, the `height` will be the value of `rangeStep`.  *Note*: For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `encoding` :  *see help for `vlencoding()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `selection` : A key-value mapping between selection names and definitions. *see help for `vlselection()`*\n  - `width` :   (Number) The width of a visualization.  *Default value:* This will be determined by the following rules:  - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its x-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - For x-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the width is [determined by the range step, paddings, and the cardinality of the field mapped to x-channel](https://vega.github.io/vega-lite/docs/scale.html#band).   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](https://vega.github.io/vega-lite/docs/size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.  *Note:* For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `projection` :  *see help for `vlprojection()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n\n- **case #2**\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `height` :   (Number) The height of a visualization.  *Default value:* - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its y-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - For y-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the height is [determined by the range step, paddings, and the cardinality of the field mapped to y-channel](https://vega.github.io/vega-lite/docs/scale.html#band). Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `y` channel, the `height` will be the value of `rangeStep`.  *Note*: For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `layer` : Layer or single view specifications to be layered.  *Note*: Specifications inside `layer` cannot use `row` and `column` channels as layering facet specifications is not allowed. *see help for `vllayer()`*\n  - `data` :  *see help for `vldata()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `width` :   (Number) The width of a visualization.  *Default value:* This will be determined by the following rules:  - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its x-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - For x-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the width is [determined by the range step, paddings, and the cardinality of the field mapped to x-channel](https://vega.github.io/vega-lite/docs/scale.html#band).   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](https://vega.github.io/vega-lite/docs/size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.  *Note:* For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n" vllayer
@doc "## `vlresolve` in `vllayer()`, `plot()` and `vlspec()`\nDefines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions.\n\n- `axis` :  *see help for `vlaxis()`*\n- `scale` :  *see help for `vlscale()`*\n- `legend` :  *see help for `vllegend()`*\n" vlresolve
@doc "## `vlinterpolate` in `vlscale()`\n- `gamma` :   (Number)\n- `typ` :   (one of rgb,cubehelix-long,cubehelix)\n" vlinterpolate
@doc "## `vltooltip` in `vlencoding()`\nOne of :\n\n- **case #1**\n  A FieldDef with Condition<ValueDef> {    condition: {value: ...},    field: ...,    ... }\n\n  - `format` : The [formatting pattern](https://vega.github.io/vega-lite/docs/format.html) for a text field. If not defined, this will be determined automatically. *see help for `vlformat()`*\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `timeUnit` :   (??? or ???)\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `condition` : One or more value definition(s) with a selection predicate.  *Note:* A field definition's `condition` property can only contain [value definitions](https://vega.github.io/vega-lite/docs/encoding.html#value-def) since Vega-Lite only allows at most one encoded field per encoding channel. *see help for `vlcondition()`*\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n\n- **case #2**\n  A ValueDef with Condition<ValueDef | FieldDef> {    condition: {field: ...} | {value: ...},    value: ..., }\n\n  - `condition` : A field definition or one or more value definition(s) with a selection predicate. *see help for `vlcondition()`*\n  - `value` :   (Number, String/Symbol or Bool) A constant value in visual domain.\n" vltooltip
@doc "## `vlfacet` in `plot()` and `vlspec()`\n- `column` :  *see help for `vlcolumn()`*\n- `row` :  *see help for `vlrow()`*\n" vlfacet
@doc "## `vlordinal` in `vlrange()`\n- `count` :   (Number)\n- `extent` :   (Array of Number)\n- `scheme` :  *see help for `vlscheme()`*\n" vlordinal
@doc "## `vlheatmap` in `vlrange()`\n- `count` :   (Number)\n- `extent` :   (Array of Number)\n- `scheme` :  *see help for `vlscheme()`*\n" vlheatmap
@doc "## `vlstyle` in `vlconfig()`\n" vlstyle
@doc "## `vlautosize` in `plot()` and `vlconfig()`\n- `contains` :   (one of content,padding) Determines how size calculation should be performed, one of `\"content\"` or `\"padding\"`. The default setting (`\"content\"`) interprets the width and height settings as the data rectangle (plotting) dimensions, to which padding is then added. In contrast, the `\"padding\"` setting includes the padding within the view size calculations, such that the width and height settings indicate the **total** intended size of the view.  *Default value*: `\"content\"`\n- `typ` :   (one of pad,none,fit)\n- `resize` :   (Bool) A boolean flag indicating if autosize layout should be re-calculated on every view update.  *Default value*: `false`\n" vlautosize
@doc "## `vlcategory` in `vlrange()`\n- `count` :   (Number)\n- `extent` :   (Array of Number)\n- `scheme` :  *see help for `vlscheme()`*\n" vlcategory
@doc "## `vlhconcat` in `plot()`\nOne of :\n\n- **case #1**\n  - `data` :  *see help for `vldata()`*\n  - `mark` :  *see help for `vlmark()`*\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `height` :   (Number) The height of a visualization.  *Default value:* - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its y-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - For y-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the height is [determined by the range step, paddings, and the cardinality of the field mapped to y-channel](https://vega.github.io/vega-lite/docs/scale.html#band). Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `y` channel, the `height` will be the value of `rangeStep`.  *Note*: For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `encoding` :  *see help for `vlencoding()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `selection` : A key-value mapping between selection names and definitions. *see help for `vlselection()`*\n  - `width` :   (Number) The width of a visualization.  *Default value:* This will be determined by the following rules:  - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its x-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - For x-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the width is [determined by the range step, paddings, and the cardinality of the field mapped to x-channel](https://vega.github.io/vega-lite/docs/scale.html#band).   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](https://vega.github.io/vega-lite/docs/size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.  *Note:* For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `projection` :  *see help for `vlprojection()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n\n- **case #2**\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `spec` : A specification of the view that gets faceted. *see help for `vlspec()`*\n  - `data` :  *see help for `vldata()`*\n  - `facet` :  *see help for `vlfacet()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n\n- **case #3**\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `spec` :  *see help for `vlspec()`*\n  - `data` :  *see help for `vldata()`*\n  - `repeat` :  *see help for `vlrepeat()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n\n- **case #4**\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `hconcat` : A list of views that should be concatenated and put into a row. *see help for `vlhconcat()`*\n  - `data` :  *see help for `vldata()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n\n- **case #5**\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `height` :   (Number) The height of a visualization.  *Default value:* - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its y-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - For y-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the height is [determined by the range step, paddings, and the cardinality of the field mapped to y-channel](https://vega.github.io/vega-lite/docs/scale.html#band). Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `y` channel, the `height` will be the value of `rangeStep`.  *Note*: For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `layer` : Layer or single view specifications to be layered.  *Note*: Specifications inside `layer` cannot use `row` and `column` channels as layering facet specifications is not allowed. *see help for `vllayer()`*\n  - `data` :  *see help for `vldata()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `width` :   (Number) The width of a visualization.  *Default value:* This will be determined by the following rules:  - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its x-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - For x-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the width is [determined by the range step, paddings, and the cardinality of the field mapped to x-channel](https://vega.github.io/vega-lite/docs/scale.html#band).   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](https://vega.github.io/vega-lite/docs/size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.  *Note:* For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n\n- **case #6**\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `vconcat` : A list of views that should be concatenated and put into a column. *see help for `vlvconcat()`*\n  - `data` :  *see help for `vldata()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n" vlhconcat
@doc "## `vlencoding` in `plot()`\n- `x` : X coordinates of the marks, or width of horizontal `\"bar\"` and `\"area\"`. *see help for `vlx()`*\n- `row` :  *see help for `vlrow()`*\n- `opacity` : Opacity of the marks – either can be a value or a range.  *Default value:* If undefined, the default opacity depends on [mark config](config.html#mark)'s `opacity` property. *see help for `vlopacity()`*\n- `column` :  *see help for `vlcolumn()`*\n- `shape` : For `point` marks the supported values are `\"circle\"` (default), `\"square\"`, `\"cross\"`, `\"diamond\"`, `\"triangle-up\"`, or `\"triangle-down\"`, or else a custom SVG path string. For `geoshape` marks it should be a field definition of the geojson data  *Default value:* If undefined, the default shape depends on [mark config](config.html#point-config)'s `shape` property. *see help for `vlshape()`*\n- `href` : A URL to load upon mouse click. *see help for `vlhref()`*\n- `y` : Y coordinates of the marks, or height of vertical `\"bar\"` and `\"area\"`. *see help for `vly()`*\n- `tooltip` : The tooltip text to show upon mouse hover. *see help for `vltooltip()`*\n- `x2` : X2 coordinates for ranged  `\"area\"`, `\"bar\"`, `\"rect\"`, and  `\"rule\"`. *see help for `vlx2()`*\n- `size` : Size of the mark. - For `\"point\"`, `\"square\"` and `\"circle\"`, – the symbol size, or pixel area of the mark. - For `\"bar\"` and `\"tick\"` – the bar and tick's size. - For `\"text\"` – the text's font size. - Size is currently unsupported for `\"line\"`, `\"area\"`, and `\"rect\"`. *see help for `vlsize()`*\n- `detail` : Additional levels of detail for grouping data in aggregate views and in line and area marks without mapping data to a specific visual channel. *see help for `vldetail()`*\n- `order` : Stack order for stacked marks or order of data points in line marks for connected scatter plots.  *Note*: In aggregate plots, `order` field should be `aggregate`d to avoid creating additional aggregation grouping. *see help for `vlorder()`*\n- `y2` : Y2 coordinates for ranged  `\"area\"`, `\"bar\"`, `\"rect\"`, and  `\"rule\"`. *see help for `vly2()`*\n- `color` : Color of the marks – either fill or stroke color based on mark type. By default, `color` represents fill color for `\"area\"`, `\"bar\"`, `\"tick\"`, `\"text\"`, `\"circle\"`, and `\"square\"` / stroke color for `\"line\"` and `\"point\"`.  *Default value:* If undefined, the default color depends on [mark config](config.html#mark)'s `color` property.  _Note:_ See the scale documentation for more information about customizing [color scheme](scale.html#scheme). *see help for `vlcolor()`*\n- `text` : Text of the `text` mark. *see help for `vltext()`*\n\n## `vlencoding` in `vllayer()` and `vlspec()`\n- `x` : X coordinates of the marks, or width of horizontal `\"bar\"` and `\"area\"`. *see help for `vlx()`*\n- `opacity` : Opacity of the marks – either can be a value or a range.  *Default value:* If undefined, the default opacity depends on [mark config](config.html#mark)'s `opacity` property. *see help for `vlopacity()`*\n- `shape` : For `point` marks the supported values are `\"circle\"` (default), `\"square\"`, `\"cross\"`, `\"diamond\"`, `\"triangle-up\"`, or `\"triangle-down\"`, or else a custom SVG path string. For `geoshape` marks it should be a field definition of the geojson data  *Default value:* If undefined, the default shape depends on [mark config](config.html#point-config)'s `shape` property. *see help for `vlshape()`*\n- `href` : A URL to load upon mouse click. *see help for `vlhref()`*\n- `y` : Y coordinates of the marks, or height of vertical `\"bar\"` and `\"area\"`. *see help for `vly()`*\n- `tooltip` : The tooltip text to show upon mouse hover. *see help for `vltooltip()`*\n- `x2` : X2 coordinates for ranged  `\"area\"`, `\"bar\"`, `\"rect\"`, and  `\"rule\"`. *see help for `vlx2()`*\n- `size` : Size of the mark. - For `\"point\"`, `\"square\"` and `\"circle\"`, – the symbol size, or pixel area of the mark. - For `\"bar\"` and `\"tick\"` – the bar and tick's size. - For `\"text\"` – the text's font size. - Size is currently unsupported for `\"line\"`, `\"area\"`, and `\"rect\"`. *see help for `vlsize()`*\n- `detail` : Additional levels of detail for grouping data in aggregate views and in line and area marks without mapping data to a specific visual channel. *see help for `vldetail()`*\n- `order` : Stack order for stacked marks or order of data points in line marks for connected scatter plots.  *Note*: In aggregate plots, `order` field should be `aggregate`d to avoid creating additional aggregation grouping. *see help for `vlorder()`*\n- `y2` : Y2 coordinates for ranged  `\"area\"`, `\"bar\"`, `\"rect\"`, and  `\"rule\"`. *see help for `vly2()`*\n- `color` : Color of the marks – either fill or stroke color based on mark type. By default, `color` represents fill color for `\"area\"`, `\"bar\"`, `\"tick\"`, `\"text\"`, `\"circle\"`, and `\"square\"` / stroke color for `\"line\"` and `\"point\"`.  *Default value:* If undefined, the default color depends on [mark config](config.html#mark)'s `color` property.  _Note:_ See the scale documentation for more information about customizing [color scheme](scale.html#scheme). *see help for `vlcolor()`*\n- `text` : Text of the `text` mark. *see help for `vltext()`*\n" vlencoding
@doc "## `vlsort` in `vly()`, `vlshape()`, `vlsize()`, `vlcolor()`, `vlx()`, `vlopacity()` and `vlunclear_what_to_do()`\n- `order` :  *see help for `vlorder()`*\n- `field` : The data [field](field.html) to sort by.  *Default value:* If unspecified, defaults to the field specified in the outer data reference. *see help for `vlfield()`*\n- `op` :   (one of q1,argmax,average,missing,max,stdev,distinct,sum,ci1,variance,median,variancep,ci0,argmin,min,valid,values,stdevp,count,mean,q3)\n" vlsort
@doc "## `vlsingle` in `vlselection()`\n- `nearest` :   (Bool) When true, an invisible voronoi diagram is computed to accelerate discrete selection. The data value _nearest_ the mouse cursor is added to the selection.  See the [nearest transform](nearest.html) documentation for more information.\n- `fields` :   (Array of String/Symbol) An array of field names whose values must match for a data tuple to fall within the selection.\n- `bind` : Establish a two-way binding between a single selection and input elements (also known as dynamic query widgets). A binding takes the form of Vega's [input element binding definition](https://vega.github.io/vega/docs/signals/#bind) or can be a mapping between projected field/encodings and binding definitions.  See the [bind transform](bind.html) documentation for more information. *see help for `vlbind()`*\n- `on` :   (Any)\n- `encodings` :   (Array of one of x,row,opacity,column,shape,href,y,x2,tooltip,size,y2,color,text) An array of encoding channels. The corresponding data field values must match for a data tuple to fall within the selection.\n- `resolve` :  *see help for `vlresolve()`*\n- `empty` :   (one of none,all) By default, all data values are considered to lie within an empty selection. When set to `none`, empty selections contain no data values.\n" vlsingle
@doc "## `vlspec` in `plot()`\nOne of :\n\n- **case #1**\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `spec` : A specification of the view that gets faceted. *see help for `vlspec()`*\n  - `data` :  *see help for `vldata()`*\n  - `facet` :  *see help for `vlfacet()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n\n- **case #2**\n  - `data` :  *see help for `vldata()`*\n  - `mark` :  *see help for `vlmark()`*\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `height` :   (Number) The height of a visualization.  *Default value:* - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its y-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - For y-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the height is [determined by the range step, paddings, and the cardinality of the field mapped to y-channel](https://vega.github.io/vega-lite/docs/scale.html#band). Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `y` channel, the `height` will be the value of `rangeStep`.  *Note*: For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `encoding` :  *see help for `vlencoding()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `selection` : A key-value mapping between selection names and definitions. *see help for `vlselection()`*\n  - `width` :   (Number) The width of a visualization.  *Default value:* This will be determined by the following rules:  - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its x-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - For x-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the width is [determined by the range step, paddings, and the cardinality of the field mapped to x-channel](https://vega.github.io/vega-lite/docs/scale.html#band).   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](https://vega.github.io/vega-lite/docs/size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.  *Note:* For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `projection` :  *see help for `vlprojection()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n\n- **case #3**\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `spec` :  *see help for `vlspec()`*\n  - `data` :  *see help for `vldata()`*\n  - `repeat` :  *see help for `vlrepeat()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n\n- **case #4**\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `hconcat` : A list of views that should be concatenated and put into a row. *see help for `vlhconcat()`*\n  - `data` :  *see help for `vldata()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n\n- **case #5**\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `vconcat` : A list of views that should be concatenated and put into a column. *see help for `vlvconcat()`*\n  - `data` :  *see help for `vldata()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n\n- **case #6**\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `height` :   (Number) The height of a visualization.  *Default value:* - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its y-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - For y-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the height is [determined by the range step, paddings, and the cardinality of the field mapped to y-channel](https://vega.github.io/vega-lite/docs/scale.html#band). Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `y` channel, the `height` will be the value of `rangeStep`.  *Note*: For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `layer` : Layer or single view specifications to be layered.  *Note*: Specifications inside `layer` cannot use `row` and `column` channels as layering facet specifications is not allowed. *see help for `vllayer()`*\n  - `data` :  *see help for `vldata()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `width` :   (Number) The width of a visualization.  *Default value:* This will be determined by the following rules:  - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its x-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - For x-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the width is [determined by the range step, paddings, and the cardinality of the field mapped to x-channel](https://vega.github.io/vega-lite/docs/scale.html#band).   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](https://vega.github.io/vega-lite/docs/size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.  *Note:* For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n\n## `vlspec` in `vlspec()`\nOne of :\n\n- **case #1**\n  - `data` :  *see help for `vldata()`*\n  - `mark` :  *see help for `vlmark()`*\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `height` :   (Number) The height of a visualization.  *Default value:* - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its y-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - For y-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the height is [determined by the range step, paddings, and the cardinality of the field mapped to y-channel](https://vega.github.io/vega-lite/docs/scale.html#band). Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `y` channel, the `height` will be the value of `rangeStep`.  *Note*: For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `encoding` :  *see help for `vlencoding()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `selection` : A key-value mapping between selection names and definitions. *see help for `vlselection()`*\n  - `width` :   (Number) The width of a visualization.  *Default value:* This will be determined by the following rules:  - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its x-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - For x-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the width is [determined by the range step, paddings, and the cardinality of the field mapped to x-channel](https://vega.github.io/vega-lite/docs/scale.html#band).   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](https://vega.github.io/vega-lite/docs/size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.  *Note:* For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `projection` :  *see help for `vlprojection()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n\n- **case #2**\n  - `name` :   (String/Symbol) Name of the visualization for later reference.\n  - `height` :   (Number) The height of a visualization.  *Default value:* - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its y-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - For y-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the height is [determined by the range step, paddings, and the cardinality of the field mapped to y-channel](https://vega.github.io/vega-lite/docs/scale.html#band). Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `y` channel, the `height` will be the value of `rangeStep`.  *Note*: For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `layer` : Layer or single view specifications to be layered.  *Note*: Specifications inside `layer` cannot use `row` and `column` channels as layering facet specifications is not allowed. *see help for `vllayer()`*\n  - `data` :  *see help for `vldata()`*\n  - `title` : Title for the plot. *see help for `vltitle()`*\n  - `width` :   (Number) The width of a visualization.  *Default value:* This will be determined by the following rules:  - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its x-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - For x-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the width is [determined by the range step, paddings, and the cardinality of the field mapped to x-channel](https://vega.github.io/vega-lite/docs/scale.html#band).   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config). - If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](https://vega.github.io/vega-lite/docs/size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.  *Note:* For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view.  *See also:* The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n  - `resolve` : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. *see help for `vlresolve()`*\n  - `description` :   (String/Symbol) Description of this mark for commenting purpose.\n  - `transform` : An array of data transformations such as filter and new field calculation. *see help for `vltransform()`*\n" vlspec
@doc "## `vlrepeat` in `plot()` and `vlspec()`\n- `column` : Horizontal repeated views. *see help for `vlcolumn()`*\n- `row` : Vertical repeated views. *see help for `vlrow()`*\n" vlrepeat
@doc "## `vlaxisBand` in `vlconfig()`\n- `domainColor` :   (String/Symbol) Color of axis domain line.  *Default value:*  (none, using Vega default).\n- `labelBound` :   (Bool or Number) Indicates if labels should be hidden if they exceed the axis range. If `false `(the default) no bounds overlap analysis is performed. If `true`, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.  *Default value:* `false`.\n- `titleX` :   (Number) X-coordinate of the axis title relative to the axis group.\n- `labelPadding` :   (Number) The padding, in pixels, between axis and text labels.\n- `tickRound` :   (Bool) Boolean flag indicating if pixel position values should be rounded to the nearest integer.\n- `tickWidth` :   (Number) The width, in pixels, of ticks.\n- `titlePadding` :   (Number) The padding, in pixels, between title and axis.\n- `tickSize` :   (Number) The size in pixels of axis ticks.\n- `labelAngle` :   (Number) The rotation angle of the axis labels.  *Default value:* `-90` for nominal and ordinal fields; `0` otherwise.\n- `minExtent` :   (Number) The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.  *Default value:* `30` for y-axis; `undefined` for x-axis.\n- `domainWidth` :   (Number) Stroke width of axis domain line  *Default value:*  (none, using Vega default).\n- `titleFontSize` :   (Number) Font size of the title.\n- `titleFontWeight` :   (String/Symbol or Number) Font weight of the title. (e.g., `\"bold\"`).\n- `labelOverlap` :   (Bool, one of parity or one of greedy) The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `\"parity\"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `\"greedy\"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).  *Default value:* `true` for non-nominal fields with non-log scales; `\"greedy\"` for log scales; otherwise `false`.\n- `titleFont` :   (String/Symbol) Font of the title. (e.g., `\"Helvetica Neue\"`).\n- `tickColor` :   (String/Symbol) The color of the axis's tick.\n- `gridOpacity` :   (Number) The stroke opacity of grid (value between [0,1])  *Default value:* (`1` by default)\n- `gridWidth` :   (Number) The grid width, in pixels.\n- `titleAngle` :   (Number) Angle in degrees of axis titles.\n- `titleMaxLength` :   (Number) Max length for axis title if the title is automatically generated from the field's description.\n- `titleLimit` :   (Number) Maximum allowed pixel width of axis titles.\n- `titleY` :   (Number) Y-coordinate of the axis title relative to the axis group.\n- `grid` :   (Bool) A boolean flag indicating if grid lines should be included as part of the axis  *Default value:* `true` for [continuous scales](scale.html#continuous) that are not binned; otherwise, `false`.\n- `gridColor` :   (String/Symbol) Color of gridlines.\n- `bandPosition` :   (Number) An interpolation fraction indicating where, for `band` scales, axis ticks should be positioned. A value of `0` places ticks at the left edge of their bands. A value of `0.5` places ticks in the middle of their bands.\n- `labelFont` :   (String/Symbol) The font of the tick label.\n- `titleAlign` :   (String/Symbol) Horizontal text alignment of axis titles.\n- `titleBaseline` :   (String/Symbol) Vertical text baseline for axis titles.\n- `gridDash` :   (Array of Number) The offset (in pixels) into which to begin drawing with the grid dash array.\n- `domain` : A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.  *Default value:* `true` *see help for `vldomain()`*\n- `labelFontSize` :   (Number) The font size of the label, in pixels.\n- `labels` :   (Bool) A boolean flag indicating if labels should be included as part of the axis.  *Default value:*  `true`.\n- `labelColor` :   (String/Symbol) The color of the tick label, can be in hex color code or regular color name.\n- `labelLimit` :   (Number) Maximum allowed pixel width of axis tick labels.\n- `maxExtent` :   (Number) The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.  *Default value:* `undefined`.\n- `labelFlush` :   (Bool or Number) Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.  *Default value:* `true` for axis of a continuous x-scale. Otherwise, `false`.\n- `ticks` :   (Bool) Boolean value that determines whether the axis should include ticks.\n- `titleColor` :   (String/Symbol) Color of the title, can be in hex color code or regular color name.\n" vlaxisBand
@doc "## `vllegend` in `vlshape()`, `vlsize()`, `vlcolor()`, `vlopacity()` and `vlunclear_what_to_do()`\nProperties of a legend or boolean flag for determining whether to show it.\n\n- `format` : The formatting pattern for labels. This is D3's [number format pattern](https://github.com/d3/d3-format#locale_format) for quantitative fields and D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format) for time field.  See the [format documentation](format.html) for more information.  *Default value:*  derived from [numberFormat](config.html#format) config for quantitative fields and from [timeFormat](config.html#format) config for temporal fields. *see help for `vlformat()`*\n- `padding` : The padding, in pixels, between the legend and axis. *see help for `vlpadding()`*\n- `values` : Explicitly set the visible legend values. *see help for `vlvalues()`*\n- `offset` :   (Number) The offset, in pixels, by which to displace the legend from the edge of the enclosing group or data rectangle.  *Default value:*  `0`\n- `tickCount` :   (Number) The desired number of tick values for quantitative legends.\n- `title` : A title for the field. If `null`, the title will be removed.  *Default value:*  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as a part of the title (e.g., `\"Sum of Profit\"`). If the field is binned or has a time unit applied, the applied function will be denoted in parentheses (e.g., `\"Profit (binned)\"`, `\"Transaction Date (year-month)\"`).  Otherwise, the title is simply the field name.  *Note*: You can customize the default field title format by providing the [`fieldTitle` property in the [config](config.html) or [`fieldTitle` function via the `compile` function's options](compile.html#field-title). *see help for `vltitle()`*\n- `zindex` :   (Number) A non-positive integer indicating z-index of the legend. If zindex is 0, legend should be drawn behind all chart elements. To put them in front, use zindex = 1.\n- `entryPadding` :   (Number) Padding (in pixels) between legend entries in a symbol legend.\n- `typ` :   (one of gradient,symbol) The type of the legend. Use `\"symbol\"` to create a discrete legend and `\"gradient\"` for a continuous color gradient.  *Default value:* `\"gradient\"` for non-binned quantitative fields and temporal fields; `\"symbol\"` otherwise.\n- `orient` :   (one of left,bottom-right,none,right,top-right,top-left,bottom-left)\n\n## `vllegend` in `vlconfig()`\n- `gradientHeight` :   (Number) The height of the gradient, in pixels.\n- `fillColor` :   (String/Symbol) Background fill color for the full legend.\n- `shortTimeLabels` :   (Bool) Whether month names and weekday names should be abbreviated.  *Default value:*  `false`\n- `strokeColor` :   (String/Symbol) Border stroke color for the full legend.\n- `titlePadding` :   (Number) The padding, in pixels, between title and legend.\n- `labelBaseline` :   (String/Symbol) The position of the baseline of legend label, can be top, middle or bottom.\n- `orient` :   (one of left,bottom-right,none,right,top-right,top-left,bottom-left)\n- `gradientLabelBaseline` :   (String/Symbol) Text baseline for color ramp gradient labels.\n- `gradientLabelLimit` :   (Number) The maximum allowed length in pixels of color ramp gradient labels.\n- `padding` : The padding, in pixels, between the legend and axis. *see help for `vlpadding()`*\n- `gradientLabelOffset` :   (Number) Vertical offset in pixels for color ramp gradient labels.\n- `symbolStrokeWidth` :   (Number) The width of the symbol's stroke.\n- `titleFontSize` :   (Number) The font size of the legend title.\n- `titleFontWeight` :   (String/Symbol or Number) The font weight of the legend title.\n- `symbolColor` :   (String/Symbol) The color of the legend symbol,\n- `gradientWidth` :   (Number) The width of the gradient, in pixels.\n- `titleFont` :   (String/Symbol) The font of the legend title.\n- `titleLimit` :   (Number) Maximum allowed pixel width of axis titles.\n- `offset` :   (Number) The offset, in pixels, by which to displace the legend from the edge of the enclosing group or data rectangle.  *Default value:*  `0`\n- `gradientStrokeWidth` :   (Number) The width of the gradient stroke, in pixels.\n- `labelAlign` :   (String/Symbol) The alignment of the legend label, can be left, middle or right.\n- `labelFont` :   (String/Symbol) The font of the legend label.\n- `strokeWidth` :   (Number) Border stroke width for the full legend.\n- `symbolType` :   (String/Symbol) Default shape type (such as \"circle\") for legend symbols.\n- `strokeDash` :   (Array of Number) Border stroke dash pattern for the full legend.\n- `titleAlign` :   (String/Symbol) Horizontal text alignment for legend titles.\n- `titleBaseline` :   (String/Symbol) Vertical text baseline for legend titles.\n- `symbolSize` :   (Number) The size of the legend symbol, in pixels.\n- `labelFontSize` :   (Number) The font size of legend label.  *Default value:* `10`.\n- `cornerRadius` :   (Number) Corner radius for the full legend.\n- `gradientStrokeColor` :   (String/Symbol) The color of the gradient stroke, can be in hex color code or regular color name.\n- `labelOffset` :   (Number) The offset of the legend label.\n- `labelColor` :   (String/Symbol) The color of the legend label, can be in hex color code or regular color name.\n- `labelLimit` :   (Number) Maximum allowed pixel width of axis tick labels.\n- `titleColor` :   (String/Symbol) The color of the legend title, can be in hex color code or regular color name.\n- `entryPadding` :   (Number) Padding (in pixels) between legend entries in a symbol legend.\n\n## `vllegend` in `vlresolve()`\n- `shape` :  *see help for `vlshape()`*\n- `color` :  *see help for `vlcolor()`*\n- `size` :  *see help for `vlsize()`*\n- `opacity` :  *see help for `vlopacity()`*\n" vllegend
@doc "## `vlparse` in `vlformat()`\nOne of :\n\n- **case #1**\n\n- **case #2**\n\n- **case #3**\n" vlparse
@doc "## `vlrange` in `vlconfig()`\n- `ramp` : Default range for _quantitative_ and _temporal_ fields. *see help for `vlramp()`*\n- `ordinal` : Default range for _ordinal_ fields. *see help for `vlordinal()`*\n- `diverging` : Default range for diverging _quantitative_ fields. *see help for `vldiverging()`*\n- `heatmap` : Default range for _quantitative_ heatmaps. *see help for `vlheatmap()`*\n- `symbol` :   (Array of String/Symbol) Default range palette for the `shape` channel.\n- `category` : Default range for _nominal_ (categorical) fields. *see help for `vlcategory()`*\n\n## `vlrange` in `vlunclear_what_to_do()`\nOne of :\n\n- **case #1**\n  (Array of ???) An array of inclusive minimum and maximum values for a field value of a data item to be included in the filtered data.\n\n- **case #2**\n  Object for defining datetime in Vega-Lite Filter. If both month and quarter are provided, month has higher precedence. `day` cannot be combined with other date. We accept string for month and day names.\n\n  - `milliseconds` :   (Number) Integer value representing the millisecond segment of time.\n  - `day` :   (Number or String/Symbol) Value representing the day of a week.  This can be one of: (1) integer value -- `1` represents Monday; (2) case-insensitive day name (e.g., `\"Monday\"`);  (3) case-insensitive, 3-character short day name (e.g., `\"Mon\"`).   <br/> **Warning:** A DateTime definition object with `day`** should not be combined with `year`, `quarter`, `month`, or `date`.\n  - `hours` :   (Number) Integer value representing the hour of a day from 0-23.\n  - `month` :   (Number or String/Symbol) One of: (1) integer value representing the month from `1`-`12`. `1` represents January;  (2) case-insensitive month name (e.g., `\"January\"`);  (3) case-insensitive, 3-character short month name (e.g., `\"Jan\"`).\n  - `utc` :   (Bool) A boolean flag indicating if date time is in utc time. If false, the date time is in local time\n  - `year` :   (Number) Integer value representing the year.\n  - `minutes` :   (Number) Integer value representing the minute segment of time from 0-59.\n  - `quarter` :   (Number) Integer value representing the quarter of the year (from 1-4).\n  - `date` :   (Number) Integer value representing the date from 1-31.\n  - `seconds` :   (Number) Integer value representing the second segment (0-59) of a time value\n" vlrange
@doc "## `vlprojection` in `vlconfig()`\nAny property of Projection can be in config\n\n- `parallel` :   (Number)\n- `tilt` :   (Number)\n- `ratio` :   (Number)\n- `lobes` :   (Number)\n- `coefficient` :   (Number)\n- `precision` : Sets the threshold for the projection’s [adaptive resampling](http://bl.ocks.org/mbostock/3795544) to the specified value in pixels. This value corresponds to the [Douglas–Peucker distance](http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm). If precision is not specified, returns the projection’s current resampling precision which defaults to `√0.5 ≅ 0.70710…`. *see help for `vlprecision()`*\n- `distance` :   (Number)\n- `clipAngle` :   (Number) Sets the projection’s clipping circle radius to the specified angle in degrees. If `null`, switches to [antimeridian](http://bl.ocks.org/mbostock/3788999) cutting rather than small-circle clipping.\n- `rotate` :   (Array of Number) Sets the projection’s three-axis rotation to the specified angles, which must be a two- or three-element array of numbers [`lambda`, `phi`, `gamma`] specifying the rotation angles in degrees about each spherical axis. (These correspond to yaw, pitch and roll.)  *Default value:* `[0, 0, 0]`\n- `clipExtent` :   (Array of ???) Sets the projection’s viewport clip extent to the specified bounds in pixels. The extent bounds are specified as an array `[[x0, y0], [x1, y1]]`, where `x0` is the left-side of the viewport, `y0` is the top, `x1` is the right and `y1` is the bottom. If `null`, no viewport clipping is performed.\n- `radius` :   (Number)\n- `fraction` :   (Number)\n- `center` :   (Array of Number) Sets the projection’s center to the specified center, a two-element array of longitude and latitude in degrees.  *Default value:* `[0, 0]`\n- `spacing` :   (Number)\n- `typ` :   (one of azimuthalEquidistant,albersUsa,gnomonic,orthographic,conicEquidistant,stereographic,albers,mercator,transverseMercator,conicConformal,azimuthalEqualArea,equirectangular,conicEqualArea)\n\n## `vlprojection` in `vllayer()`, `plot()` and `vlspec()`\n- `parallel` :   (Number)\n- `tilt` :   (Number)\n- `ratio` :   (Number)\n- `lobes` :   (Number)\n- `coefficient` :   (Number)\n- `precision` : Sets the threshold for the projection’s [adaptive resampling](http://bl.ocks.org/mbostock/3795544) to the specified value in pixels. This value corresponds to the [Douglas–Peucker distance](http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm). If precision is not specified, returns the projection’s current resampling precision which defaults to `√0.5 ≅ 0.70710…`. *see help for `vlprecision()`*\n- `distance` :   (Number)\n- `clipAngle` :   (Number) Sets the projection’s clipping circle radius to the specified angle in degrees. If `null`, switches to [antimeridian](http://bl.ocks.org/mbostock/3788999) cutting rather than small-circle clipping.\n- `rotate` :   (Array of Number) Sets the projection’s three-axis rotation to the specified angles, which must be a two- or three-element array of numbers [`lambda`, `phi`, `gamma`] specifying the rotation angles in degrees about each spherical axis. (These correspond to yaw, pitch and roll.)  *Default value:* `[0, 0, 0]`\n- `clipExtent` :   (Array of ???) Sets the projection’s viewport clip extent to the specified bounds in pixels. The extent bounds are specified as an array `[[x0, y0], [x1, y1]]`, where `x0` is the left-side of the viewport, `y0` is the top, `x1` is the right and `y1` is the bottom. If `null`, no viewport clipping is performed.\n- `radius` :   (Number)\n- `fraction` :   (Number)\n- `center` :   (Array of Number) Sets the projection’s center to the specified center, a two-element array of longitude and latitude in degrees.  *Default value:* `[0, 0]`\n- `spacing` :   (Number)\n- `typ` :   (one of azimuthalEquidistant,albersUsa,gnomonic,orthographic,conicEquidistant,stereographic,albers,mercator,transverseMercator,conicConformal,azimuthalEqualArea,equirectangular,conicEqualArea)\n" vlprojection
@doc "## `vlpadding` in `plot()` and `vlconfig()`\n- `left` :   (Number)\n- `bottom` :   (Number)\n- `right` :   (Number)\n- `top` :   (Number)\n" vlpadding
@doc "## `vlconfig` in `plot()`\n- `countTitle` :   (String/Symbol) Default axis and legend title for count fields.  *Default value:* `'Number of Records'`.\n- `background` :   (String/Symbol) CSS color property to use as the background of visualization.  *Default value:* none (transparent)\n- `tick` :  *see help for `vltick()`*\n- `view` :  *see help for `vlview()`*\n- `axisBand` :  *see help for `vlaxisBand()`*\n- `scale` :  *see help for `vlscale()`*\n- `mark` :  *see help for `vlmark()`*\n- `numberFormat` :   (String/Symbol) D3 Number format for axis labels and text tables. For example \"s\" for SI units. Use [D3's number format pattern](https://github.com/d3/d3-format#locale_format).\n- `bar` :  *see help for `vlbar()`*\n- `padding` :  *see help for `vlpadding()`*\n- `range` :  *see help for `vlrange()`*\n- `axisX` :   - `domainColor` :   (String/Symbol) Color of axis domain line.  *Default value:*  (none, using Vega default).\n  - `labelBound` :   (Bool or Number) Indicates if labels should be hidden if they exceed the axis range. If `false `(the default) no bounds overlap analysis is performed. If `true`, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.  *Default value:* `false`.\n  - `titleX` :   (Number) X-coordinate of the axis title relative to the axis group.\n  - `labelPadding` :   (Number) The padding, in pixels, between axis and text labels.\n  - `tickRound` :   (Bool) Boolean flag indicating if pixel position values should be rounded to the nearest integer.\n  - `tickWidth` :   (Number) The width, in pixels, of ticks.\n  - `titlePadding` :   (Number) The padding, in pixels, between title and axis.\n  - `tickSize` :   (Number) The size in pixels of axis ticks.\n  - `labelAngle` :   (Number) The rotation angle of the axis labels.  *Default value:* `-90` for nominal and ordinal fields; `0` otherwise.\n  - `minExtent` :   (Number) The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.  *Default value:* `30` for y-axis; `undefined` for x-axis.\n  - `domainWidth` :   (Number) Stroke width of axis domain line  *Default value:*  (none, using Vega default).\n  - `titleFontSize` :   (Number) Font size of the title.\n  - `titleFontWeight` :   (String/Symbol or Number) Font weight of the title. (e.g., `\"bold\"`).\n  - `labelOverlap` :   (Bool, one of parity or one of greedy) The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `\"parity\"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `\"greedy\"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).  *Default value:* `true` for non-nominal fields with non-log scales; `\"greedy\"` for log scales; otherwise `false`.\n  - `titleFont` :   (String/Symbol) Font of the title. (e.g., `\"Helvetica Neue\"`).\n  - `tickColor` :   (String/Symbol) The color of the axis's tick.\n  - `gridOpacity` :   (Number) The stroke opacity of grid (value between [0,1])  *Default value:* (`1` by default)\n  - `gridWidth` :   (Number) The grid width, in pixels.\n  - `titleAngle` :   (Number) Angle in degrees of axis titles.\n  - `titleMaxLength` :   (Number) Max length for axis title if the title is automatically generated from the field's description.\n  - `titleLimit` :   (Number) Maximum allowed pixel width of axis titles.\n  - `titleY` :   (Number) Y-coordinate of the axis title relative to the axis group.\n  - `grid` :   (Bool) A boolean flag indicating if grid lines should be included as part of the axis  *Default value:* `true` for [continuous scales](scale.html#continuous) that are not binned; otherwise, `false`.\n  - `gridColor` :   (String/Symbol) Color of gridlines.\n  - `bandPosition` :   (Number) An interpolation fraction indicating where, for `band` scales, axis ticks should be positioned. A value of `0` places ticks at the left edge of their bands. A value of `0.5` places ticks in the middle of their bands.\n  - `labelFont` :   (String/Symbol) The font of the tick label.\n  - `titleAlign` :   (String/Symbol) Horizontal text alignment of axis titles.\n  - `titleBaseline` :   (String/Symbol) Vertical text baseline for axis titles.\n  - `gridDash` :   (Array of Number) The offset (in pixels) into which to begin drawing with the grid dash array.\n  - `domain` : A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.  *Default value:* `true` *see help for `vldomain()`*\n  - `labelFontSize` :   (Number) The font size of the label, in pixels.\n  - `labels` :   (Bool) A boolean flag indicating if labels should be included as part of the axis.  *Default value:*  `true`.\n  - `labelColor` :   (String/Symbol) The color of the tick label, can be in hex color code or regular color name.\n  - `labelLimit` :   (Number) Maximum allowed pixel width of axis tick labels.\n  - `maxExtent` :   (Number) The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.  *Default value:* `undefined`.\n  - `labelFlush` :   (Bool or Number) Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.  *Default value:* `true` for axis of a continuous x-scale. Otherwise, `false`.\n  - `ticks` :   (Bool) Boolean value that determines whether the axis should include ticks.\n  - `titleColor` :   (String/Symbol) Color of the title, can be in hex color code or regular color name.\n- `stack` :   (one of zero,normalize,center)\n- `square` :   - `tension` :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\n  - `stroke` :   (String/Symbol) Default Stroke Color.  This has higher precedence than config.color  *Default value:* (None)\n  - `dy` :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n  - `fontSize` :   (Number) The font size, in pixels.\n  - `strokeOpacity` :   (Number) The stroke opacity (value between [0,1]).  *Default value:* `1`\n  - `angle` :   (Number) The rotation angle of the text, in degrees.\n  - `orient` :   (one of horizontal,vertical)\n  - `strokeDashOffset` :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\n  - `opacity` : The overall opacity (value between [0,1]).  *Default value:* `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise. *see help for `vlopacity()`*\n  - `fontWeight` :   (one of normal,bold or Number) The font weight (e.g., `\"bold\"`).\n  - `filled` :   (Bool) Whether the mark's color should be used as fill color instead of stroke color.  *Default value:* `true` for all marks except `point` and `false` for `point`.  *Applicable for:* `bar`, `point`, `circle`, `square`, and `area` marks.  *Note:* This property cannot be used in a [style config](mark.html#style-config).\n  - `shape` : The default symbol shape to use. One of: `\"circle\"` (default), `\"square\"`, `\"cross\"`, `\"diamond\"`, `\"triangle-up\"`, or `\"triangle-down\"`, or a custom SVG path.  *Default value:* `\"circle\"` *see help for `vlshape()`*\n  - `theta` :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating \"north\".\n  - `fontStyle` :   (one of normal,italic)\n  - `font` :   (String/Symbol) The typeface to set the text in (e.g., `\"Helvetica Neue\"`).\n  - `href` : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. *see help for `vlhref()`*\n  - `fillOpacity` :   (Number) The fill opacity (value between [0,1]).  *Default value:* `1`\n  - `dx` :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n  - `fill` :   (String/Symbol) Default Fill Color.  This has higher precedence than config.color  *Default value:* (None)\n  - `radius` :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.\n  - `align` :   (one of left,right,center)\n  - `strokeWidth` :   (Number) The stroke width, in pixels.\n  - `size` : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  *Default value:* `30` *see help for `vlsize()`*\n  - `cursor` :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.\n  - `strokeDash` :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\n  - `interpolate` :  *see help for `vlinterpolate()`*\n  - `color` : Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.  *Default value:* <span style=\"color: #4682b4;\">&#9632;</span> `\"#4682b4\"`  *Note:* This property cannot be used in a [style config](mark.html#style-config). *see help for `vlcolor()`*\n  - `text` : Placeholder text if the `text` channel is not specified *see help for `vltext()`*\n  - `baseline` :   (one of bottom,top,middle)\n  - `limit` :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\n- `timeFormat` :   (String/Symbol) Default datetime format for axis and legend labels. The format can be set directly on each axis and legend. Use [D3's time format pattern](https://github.com/d3/d3-time-format#locale_format).  *Default value:* `'%b %d, %Y'`.\n- `axisTop` :   - `domainColor` :   (String/Symbol) Color of axis domain line.  *Default value:*  (none, using Vega default).\n  - `labelBound` :   (Bool or Number) Indicates if labels should be hidden if they exceed the axis range. If `false `(the default) no bounds overlap analysis is performed. If `true`, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.  *Default value:* `false`.\n  - `titleX` :   (Number) X-coordinate of the axis title relative to the axis group.\n  - `labelPadding` :   (Number) The padding, in pixels, between axis and text labels.\n  - `tickRound` :   (Bool) Boolean flag indicating if pixel position values should be rounded to the nearest integer.\n  - `tickWidth` :   (Number) The width, in pixels, of ticks.\n  - `titlePadding` :   (Number) The padding, in pixels, between title and axis.\n  - `tickSize` :   (Number) The size in pixels of axis ticks.\n  - `labelAngle` :   (Number) The rotation angle of the axis labels.  *Default value:* `-90` for nominal and ordinal fields; `0` otherwise.\n  - `minExtent` :   (Number) The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.  *Default value:* `30` for y-axis; `undefined` for x-axis.\n  - `domainWidth` :   (Number) Stroke width of axis domain line  *Default value:*  (none, using Vega default).\n  - `titleFontSize` :   (Number) Font size of the title.\n  - `titleFontWeight` :   (String/Symbol or Number) Font weight of the title. (e.g., `\"bold\"`).\n  - `labelOverlap` :   (Bool, one of parity or one of greedy) The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `\"parity\"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `\"greedy\"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).  *Default value:* `true` for non-nominal fields with non-log scales; `\"greedy\"` for log scales; otherwise `false`.\n  - `titleFont` :   (String/Symbol) Font of the title. (e.g., `\"Helvetica Neue\"`).\n  - `tickColor` :   (String/Symbol) The color of the axis's tick.\n  - `gridOpacity` :   (Number) The stroke opacity of grid (value between [0,1])  *Default value:* (`1` by default)\n  - `gridWidth` :   (Number) The grid width, in pixels.\n  - `titleAngle` :   (Number) Angle in degrees of axis titles.\n  - `titleMaxLength` :   (Number) Max length for axis title if the title is automatically generated from the field's description.\n  - `titleLimit` :   (Number) Maximum allowed pixel width of axis titles.\n  - `titleY` :   (Number) Y-coordinate of the axis title relative to the axis group.\n  - `grid` :   (Bool) A boolean flag indicating if grid lines should be included as part of the axis  *Default value:* `true` for [continuous scales](scale.html#continuous) that are not binned; otherwise, `false`.\n  - `gridColor` :   (String/Symbol) Color of gridlines.\n  - `bandPosition` :   (Number) An interpolation fraction indicating where, for `band` scales, axis ticks should be positioned. A value of `0` places ticks at the left edge of their bands. A value of `0.5` places ticks in the middle of their bands.\n  - `labelFont` :   (String/Symbol) The font of the tick label.\n  - `titleAlign` :   (String/Symbol) Horizontal text alignment of axis titles.\n  - `titleBaseline` :   (String/Symbol) Vertical text baseline for axis titles.\n  - `gridDash` :   (Array of Number) The offset (in pixels) into which to begin drawing with the grid dash array.\n  - `domain` : A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.  *Default value:* `true` *see help for `vldomain()`*\n  - `labelFontSize` :   (Number) The font size of the label, in pixels.\n  - `labels` :   (Bool) A boolean flag indicating if labels should be included as part of the axis.  *Default value:*  `true`.\n  - `labelColor` :   (String/Symbol) The color of the tick label, can be in hex color code or regular color name.\n  - `labelLimit` :   (Number) Maximum allowed pixel width of axis tick labels.\n  - `maxExtent` :   (Number) The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.  *Default value:* `undefined`.\n  - `labelFlush` :   (Bool or Number) Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.  *Default value:* `true` for axis of a continuous x-scale. Otherwise, `false`.\n  - `ticks` :   (Bool) Boolean value that determines whether the axis should include ticks.\n  - `titleColor` :   (String/Symbol) Color of the title, can be in hex color code or regular color name.\n- `point` :   - `tension` :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\n  - `stroke` :   (String/Symbol) Default Stroke Color.  This has higher precedence than config.color  *Default value:* (None)\n  - `dy` :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n  - `fontSize` :   (Number) The font size, in pixels.\n  - `strokeOpacity` :   (Number) The stroke opacity (value between [0,1]).  *Default value:* `1`\n  - `angle` :   (Number) The rotation angle of the text, in degrees.\n  - `orient` :   (one of horizontal,vertical)\n  - `strokeDashOffset` :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\n  - `opacity` : The overall opacity (value between [0,1]).  *Default value:* `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise. *see help for `vlopacity()`*\n  - `fontWeight` :   (one of normal,bold or Number) The font weight (e.g., `\"bold\"`).\n  - `filled` :   (Bool) Whether the mark's color should be used as fill color instead of stroke color.  *Default value:* `true` for all marks except `point` and `false` for `point`.  *Applicable for:* `bar`, `point`, `circle`, `square`, and `area` marks.  *Note:* This property cannot be used in a [style config](mark.html#style-config).\n  - `shape` : The default symbol shape to use. One of: `\"circle\"` (default), `\"square\"`, `\"cross\"`, `\"diamond\"`, `\"triangle-up\"`, or `\"triangle-down\"`, or a custom SVG path.  *Default value:* `\"circle\"` *see help for `vlshape()`*\n  - `theta` :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating \"north\".\n  - `fontStyle` :   (one of normal,italic)\n  - `font` :   (String/Symbol) The typeface to set the text in (e.g., `\"Helvetica Neue\"`).\n  - `href` : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. *see help for `vlhref()`*\n  - `fillOpacity` :   (Number) The fill opacity (value between [0,1]).  *Default value:* `1`\n  - `dx` :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n  - `fill` :   (String/Symbol) Default Fill Color.  This has higher precedence than config.color  *Default value:* (None)\n  - `radius` :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.\n  - `align` :   (one of left,right,center)\n  - `strokeWidth` :   (Number) The stroke width, in pixels.\n  - `size` : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  *Default value:* `30` *see help for `vlsize()`*\n  - `cursor` :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.\n  - `strokeDash` :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\n  - `interpolate` :  *see help for `vlinterpolate()`*\n  - `color` : Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.  *Default value:* <span style=\"color: #4682b4;\">&#9632;</span> `\"#4682b4\"`  *Note:* This property cannot be used in a [style config](mark.html#style-config). *see help for `vlcolor()`*\n  - `text` : Placeholder text if the `text` channel is not specified *see help for `vltext()`*\n  - `baseline` :   (one of bottom,top,middle)\n  - `limit` :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\n- `axisBottom` :   - `domainColor` :   (String/Symbol) Color of axis domain line.  *Default value:*  (none, using Vega default).\n  - `labelBound` :   (Bool or Number) Indicates if labels should be hidden if they exceed the axis range. If `false `(the default) no bounds overlap analysis is performed. If `true`, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.  *Default value:* `false`.\n  - `titleX` :   (Number) X-coordinate of the axis title relative to the axis group.\n  - `labelPadding` :   (Number) The padding, in pixels, between axis and text labels.\n  - `tickRound` :   (Bool) Boolean flag indicating if pixel position values should be rounded to the nearest integer.\n  - `tickWidth` :   (Number) The width, in pixels, of ticks.\n  - `titlePadding` :   (Number) The padding, in pixels, between title and axis.\n  - `tickSize` :   (Number) The size in pixels of axis ticks.\n  - `labelAngle` :   (Number) The rotation angle of the axis labels.  *Default value:* `-90` for nominal and ordinal fields; `0` otherwise.\n  - `minExtent` :   (Number) The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.  *Default value:* `30` for y-axis; `undefined` for x-axis.\n  - `domainWidth` :   (Number) Stroke width of axis domain line  *Default value:*  (none, using Vega default).\n  - `titleFontSize` :   (Number) Font size of the title.\n  - `titleFontWeight` :   (String/Symbol or Number) Font weight of the title. (e.g., `\"bold\"`).\n  - `labelOverlap` :   (Bool, one of parity or one of greedy) The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `\"parity\"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `\"greedy\"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).  *Default value:* `true` for non-nominal fields with non-log scales; `\"greedy\"` for log scales; otherwise `false`.\n  - `titleFont` :   (String/Symbol) Font of the title. (e.g., `\"Helvetica Neue\"`).\n  - `tickColor` :   (String/Symbol) The color of the axis's tick.\n  - `gridOpacity` :   (Number) The stroke opacity of grid (value between [0,1])  *Default value:* (`1` by default)\n  - `gridWidth` :   (Number) The grid width, in pixels.\n  - `titleAngle` :   (Number) Angle in degrees of axis titles.\n  - `titleMaxLength` :   (Number) Max length for axis title if the title is automatically generated from the field's description.\n  - `titleLimit` :   (Number) Maximum allowed pixel width of axis titles.\n  - `titleY` :   (Number) Y-coordinate of the axis title relative to the axis group.\n  - `grid` :   (Bool) A boolean flag indicating if grid lines should be included as part of the axis  *Default value:* `true` for [continuous scales](scale.html#continuous) that are not binned; otherwise, `false`.\n  - `gridColor` :   (String/Symbol) Color of gridlines.\n  - `bandPosition` :   (Number) An interpolation fraction indicating where, for `band` scales, axis ticks should be positioned. A value of `0` places ticks at the left edge of their bands. A value of `0.5` places ticks in the middle of their bands.\n  - `labelFont` :   (String/Symbol) The font of the tick label.\n  - `titleAlign` :   (String/Symbol) Horizontal text alignment of axis titles.\n  - `titleBaseline` :   (String/Symbol) Vertical text baseline for axis titles.\n  - `gridDash` :   (Array of Number) The offset (in pixels) into which to begin drawing with the grid dash array.\n  - `domain` : A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.  *Default value:* `true` *see help for `vldomain()`*\n  - `labelFontSize` :   (Number) The font size of the label, in pixels.\n  - `labels` :   (Bool) A boolean flag indicating if labels should be included as part of the axis.  *Default value:*  `true`.\n  - `labelColor` :   (String/Symbol) The color of the tick label, can be in hex color code or regular color name.\n  - `labelLimit` :   (Number) Maximum allowed pixel width of axis tick labels.\n  - `maxExtent` :   (Number) The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.  *Default value:* `undefined`.\n  - `labelFlush` :   (Bool or Number) Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.  *Default value:* `true` for axis of a continuous x-scale. Otherwise, `false`.\n  - `ticks` :   (Bool) Boolean value that determines whether the axis should include ticks.\n  - `titleColor` :   (String/Symbol) Color of the title, can be in hex color code or regular color name.\n- `line` :   - `tension` :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\n  - `stroke` :   (String/Symbol) Default Stroke Color.  This has higher precedence than config.color  *Default value:* (None)\n  - `dy` :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n  - `fontSize` :   (Number) The font size, in pixels.\n  - `strokeOpacity` :   (Number) The stroke opacity (value between [0,1]).  *Default value:* `1`\n  - `angle` :   (Number) The rotation angle of the text, in degrees.\n  - `orient` :   (one of horizontal,vertical)\n  - `strokeDashOffset` :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\n  - `opacity` : The overall opacity (value between [0,1]).  *Default value:* `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise. *see help for `vlopacity()`*\n  - `fontWeight` :   (one of normal,bold or Number) The font weight (e.g., `\"bold\"`).\n  - `filled` :   (Bool) Whether the mark's color should be used as fill color instead of stroke color.  *Default value:* `true` for all marks except `point` and `false` for `point`.  *Applicable for:* `bar`, `point`, `circle`, `square`, and `area` marks.  *Note:* This property cannot be used in a [style config](mark.html#style-config).\n  - `shape` : The default symbol shape to use. One of: `\"circle\"` (default), `\"square\"`, `\"cross\"`, `\"diamond\"`, `\"triangle-up\"`, or `\"triangle-down\"`, or a custom SVG path.  *Default value:* `\"circle\"` *see help for `vlshape()`*\n  - `theta` :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating \"north\".\n  - `fontStyle` :   (one of normal,italic)\n  - `font` :   (String/Symbol) The typeface to set the text in (e.g., `\"Helvetica Neue\"`).\n  - `href` : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. *see help for `vlhref()`*\n  - `fillOpacity` :   (Number) The fill opacity (value between [0,1]).  *Default value:* `1`\n  - `dx` :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n  - `fill` :   (String/Symbol) Default Fill Color.  This has higher precedence than config.color  *Default value:* (None)\n  - `radius` :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.\n  - `align` :   (one of left,right,center)\n  - `strokeWidth` :   (Number) The stroke width, in pixels.\n  - `size` : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  *Default value:* `30` *see help for `vlsize()`*\n  - `cursor` :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.\n  - `strokeDash` :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\n  - `interpolate` :  *see help for `vlinterpolate()`*\n  - `color` : Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.  *Default value:* <span style=\"color: #4682b4;\">&#9632;</span> `\"#4682b4\"`  *Note:* This property cannot be used in a [style config](mark.html#style-config). *see help for `vlcolor()`*\n  - `text` : Placeholder text if the `text` channel is not specified *see help for `vltext()`*\n  - `baseline` :   (one of bottom,top,middle)\n  - `limit` :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\n- `selection` :  *see help for `vlselection()`*\n- `rect` :   - `tension` :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\n  - `stroke` :   (String/Symbol) Default Stroke Color.  This has higher precedence than config.color  *Default value:* (None)\n  - `dy` :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n  - `fontSize` :   (Number) The font size, in pixels.\n  - `strokeOpacity` :   (Number) The stroke opacity (value between [0,1]).  *Default value:* `1`\n  - `angle` :   (Number) The rotation angle of the text, in degrees.\n  - `orient` :   (one of horizontal,vertical)\n  - `strokeDashOffset` :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\n  - `opacity` : The overall opacity (value between [0,1]).  *Default value:* `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise. *see help for `vlopacity()`*\n  - `fontWeight` :   (one of normal,bold or Number) The font weight (e.g., `\"bold\"`).\n  - `filled` :   (Bool) Whether the mark's color should be used as fill color instead of stroke color.  *Default value:* `true` for all marks except `point` and `false` for `point`.  *Applicable for:* `bar`, `point`, `circle`, `square`, and `area` marks.  *Note:* This property cannot be used in a [style config](mark.html#style-config).\n  - `shape` : The default symbol shape to use. One of: `\"circle\"` (default), `\"square\"`, `\"cross\"`, `\"diamond\"`, `\"triangle-up\"`, or `\"triangle-down\"`, or a custom SVG path.  *Default value:* `\"circle\"` *see help for `vlshape()`*\n  - `theta` :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating \"north\".\n  - `fontStyle` :   (one of normal,italic)\n  - `font` :   (String/Symbol) The typeface to set the text in (e.g., `\"Helvetica Neue\"`).\n  - `href` : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. *see help for `vlhref()`*\n  - `fillOpacity` :   (Number) The fill opacity (value between [0,1]).  *Default value:* `1`\n  - `dx` :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n  - `fill` :   (String/Symbol) Default Fill Color.  This has higher precedence than config.color  *Default value:* (None)\n  - `radius` :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.\n  - `align` :   (one of left,right,center)\n  - `strokeWidth` :   (Number) The stroke width, in pixels.\n  - `size` : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  *Default value:* `30` *see help for `vlsize()`*\n  - `cursor` :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.\n  - `strokeDash` :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\n  - `interpolate` :  *see help for `vlinterpolate()`*\n  - `color` : Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.  *Default value:* <span style=\"color: #4682b4;\">&#9632;</span> `\"#4682b4\"`  *Note:* This property cannot be used in a [style config](mark.html#style-config). *see help for `vlcolor()`*\n  - `text` : Placeholder text if the `text` channel is not specified *see help for `vltext()`*\n  - `baseline` :   (one of bottom,top,middle)\n  - `limit` :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\n- `axis` :  *see help for `vlaxis()`*\n- `area` :   - `tension` :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\n  - `stroke` :   (String/Symbol) Default Stroke Color.  This has higher precedence than config.color  *Default value:* (None)\n  - `dy` :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n  - `fontSize` :   (Number) The font size, in pixels.\n  - `strokeOpacity` :   (Number) The stroke opacity (value between [0,1]).  *Default value:* `1`\n  - `angle` :   (Number) The rotation angle of the text, in degrees.\n  - `orient` :   (one of horizontal,vertical)\n  - `strokeDashOffset` :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\n  - `opacity` : The overall opacity (value between [0,1]).  *Default value:* `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise. *see help for `vlopacity()`*\n  - `fontWeight` :   (one of normal,bold or Number) The font weight (e.g., `\"bold\"`).\n  - `filled` :   (Bool) Whether the mark's color should be used as fill color instead of stroke color.  *Default value:* `true` for all marks except `point` and `false` for `point`.  *Applicable for:* `bar`, `point`, `circle`, `square`, and `area` marks.  *Note:* This property cannot be used in a [style config](mark.html#style-config).\n  - `shape` : The default symbol shape to use. One of: `\"circle\"` (default), `\"square\"`, `\"cross\"`, `\"diamond\"`, `\"triangle-up\"`, or `\"triangle-down\"`, or a custom SVG path.  *Default value:* `\"circle\"` *see help for `vlshape()`*\n  - `theta` :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating \"north\".\n  - `fontStyle` :   (one of normal,italic)\n  - `font` :   (String/Symbol) The typeface to set the text in (e.g., `\"Helvetica Neue\"`).\n  - `href` : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. *see help for `vlhref()`*\n  - `fillOpacity` :   (Number) The fill opacity (value between [0,1]).  *Default value:* `1`\n  - `dx` :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n  - `fill` :   (String/Symbol) Default Fill Color.  This has higher precedence than config.color  *Default value:* (None)\n  - `radius` :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.\n  - `align` :   (one of left,right,center)\n  - `strokeWidth` :   (Number) The stroke width, in pixels.\n  - `size` : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  *Default value:* `30` *see help for `vlsize()`*\n  - `cursor` :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.\n  - `strokeDash` :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\n  - `interpolate` :  *see help for `vlinterpolate()`*\n  - `color` : Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.  *Default value:* <span style=\"color: #4682b4;\">&#9632;</span> `\"#4682b4\"`  *Note:* This property cannot be used in a [style config](mark.html#style-config). *see help for `vlcolor()`*\n  - `text` : Placeholder text if the `text` channel is not specified *see help for `vltext()`*\n  - `baseline` :   (one of bottom,top,middle)\n  - `limit` :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\n- `circle` :   - `tension` :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\n  - `stroke` :   (String/Symbol) Default Stroke Color.  This has higher precedence than config.color  *Default value:* (None)\n  - `dy` :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n  - `fontSize` :   (Number) The font size, in pixels.\n  - `strokeOpacity` :   (Number) The stroke opacity (value between [0,1]).  *Default value:* `1`\n  - `angle` :   (Number) The rotation angle of the text, in degrees.\n  - `orient` :   (one of horizontal,vertical)\n  - `strokeDashOffset` :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\n  - `opacity` : The overall opacity (value between [0,1]).  *Default value:* `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise. *see help for `vlopacity()`*\n  - `fontWeight` :   (one of normal,bold or Number) The font weight (e.g., `\"bold\"`).\n  - `filled` :   (Bool) Whether the mark's color should be used as fill color instead of stroke color.  *Default value:* `true` for all marks except `point` and `false` for `point`.  *Applicable for:* `bar`, `point`, `circle`, `square`, and `area` marks.  *Note:* This property cannot be used in a [style config](mark.html#style-config).\n  - `shape` : The default symbol shape to use. One of: `\"circle\"` (default), `\"square\"`, `\"cross\"`, `\"diamond\"`, `\"triangle-up\"`, or `\"triangle-down\"`, or a custom SVG path.  *Default value:* `\"circle\"` *see help for `vlshape()`*\n  - `theta` :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating \"north\".\n  - `fontStyle` :   (one of normal,italic)\n  - `font` :   (String/Symbol) The typeface to set the text in (e.g., `\"Helvetica Neue\"`).\n  - `href` : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. *see help for `vlhref()`*\n  - `fillOpacity` :   (Number) The fill opacity (value between [0,1]).  *Default value:* `1`\n  - `dx` :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n  - `fill` :   (String/Symbol) Default Fill Color.  This has higher precedence than config.color  *Default value:* (None)\n  - `radius` :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.\n  - `align` :   (one of left,right,center)\n  - `strokeWidth` :   (Number) The stroke width, in pixels.\n  - `size` : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  *Default value:* `30` *see help for `vlsize()`*\n  - `cursor` :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.\n  - `strokeDash` :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\n  - `interpolate` :  *see help for `vlinterpolate()`*\n  - `color` : Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.  *Default value:* <span style=\"color: #4682b4;\">&#9632;</span> `\"#4682b4\"`  *Note:* This property cannot be used in a [style config](mark.html#style-config). *see help for `vlcolor()`*\n  - `text` : Placeholder text if the `text` channel is not specified *see help for `vltext()`*\n  - `baseline` :   (one of bottom,top,middle)\n  - `limit` :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\n- `style` :  *see help for `vlstyle()`*\n- `fieldTitle` :   (one of functional,verbal,plain) Defines how Vega-Lite generates title for fields.  There are three possible styles: - `\"verbal\"` (Default) - displays function in a verbal style (e.g., \"Sum of field\", \"Year-month of date\", \"field (binned)\"). - `\"function\"` - displays function using parentheses and capitalized texts (e.g., \"SUM(field)\", \"YEARMONTH(date)\", \"BIN(field)\"). - `\"plain\"` - displays only the field name without functions (e.g., \"field\", \"date\", \"field\").\n- `rule` :   - `tension` :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\n  - `stroke` :   (String/Symbol) Default Stroke Color.  This has higher precedence than config.color  *Default value:* (None)\n  - `dy` :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n  - `fontSize` :   (Number) The font size, in pixels.\n  - `strokeOpacity` :   (Number) The stroke opacity (value between [0,1]).  *Default value:* `1`\n  - `angle` :   (Number) The rotation angle of the text, in degrees.\n  - `orient` :   (one of horizontal,vertical)\n  - `strokeDashOffset` :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\n  - `opacity` : The overall opacity (value between [0,1]).  *Default value:* `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise. *see help for `vlopacity()`*\n  - `fontWeight` :   (one of normal,bold or Number) The font weight (e.g., `\"bold\"`).\n  - `filled` :   (Bool) Whether the mark's color should be used as fill color instead of stroke color.  *Default value:* `true` for all marks except `point` and `false` for `point`.  *Applicable for:* `bar`, `point`, `circle`, `square`, and `area` marks.  *Note:* This property cannot be used in a [style config](mark.html#style-config).\n  - `shape` : The default symbol shape to use. One of: `\"circle\"` (default), `\"square\"`, `\"cross\"`, `\"diamond\"`, `\"triangle-up\"`, or `\"triangle-down\"`, or a custom SVG path.  *Default value:* `\"circle\"` *see help for `vlshape()`*\n  - `theta` :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating \"north\".\n  - `fontStyle` :   (one of normal,italic)\n  - `font` :   (String/Symbol) The typeface to set the text in (e.g., `\"Helvetica Neue\"`).\n  - `href` : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. *see help for `vlhref()`*\n  - `fillOpacity` :   (Number) The fill opacity (value between [0,1]).  *Default value:* `1`\n  - `dx` :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n  - `fill` :   (String/Symbol) Default Fill Color.  This has higher precedence than config.color  *Default value:* (None)\n  - `radius` :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.\n  - `align` :   (one of left,right,center)\n  - `strokeWidth` :   (Number) The stroke width, in pixels.\n  - `size` : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  *Default value:* `30` *see help for `vlsize()`*\n  - `cursor` :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.\n  - `strokeDash` :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\n  - `interpolate` :  *see help for `vlinterpolate()`*\n  - `color` : Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.  *Default value:* <span style=\"color: #4682b4;\">&#9632;</span> `\"#4682b4\"`  *Note:* This property cannot be used in a [style config](mark.html#style-config). *see help for `vlcolor()`*\n  - `text` : Placeholder text if the `text` channel is not specified *see help for `vltext()`*\n  - `baseline` :   (one of bottom,top,middle)\n  - `limit` :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\n- `axisY` :   - `domainColor` :   (String/Symbol) Color of axis domain line.  *Default value:*  (none, using Vega default).\n  - `labelBound` :   (Bool or Number) Indicates if labels should be hidden if they exceed the axis range. If `false `(the default) no bounds overlap analysis is performed. If `true`, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.  *Default value:* `false`.\n  - `titleX` :   (Number) X-coordinate of the axis title relative to the axis group.\n  - `labelPadding` :   (Number) The padding, in pixels, between axis and text labels.\n  - `tickRound` :   (Bool) Boolean flag indicating if pixel position values should be rounded to the nearest integer.\n  - `tickWidth` :   (Number) The width, in pixels, of ticks.\n  - `titlePadding` :   (Number) The padding, in pixels, between title and axis.\n  - `tickSize` :   (Number) The size in pixels of axis ticks.\n  - `labelAngle` :   (Number) The rotation angle of the axis labels.  *Default value:* `-90` for nominal and ordinal fields; `0` otherwise.\n  - `minExtent` :   (Number) The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.  *Default value:* `30` for y-axis; `undefined` for x-axis.\n  - `domainWidth` :   (Number) Stroke width of axis domain line  *Default value:*  (none, using Vega default).\n  - `titleFontSize` :   (Number) Font size of the title.\n  - `titleFontWeight` :   (String/Symbol or Number) Font weight of the title. (e.g., `\"bold\"`).\n  - `labelOverlap` :   (Bool, one of parity or one of greedy) The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `\"parity\"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `\"greedy\"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).  *Default value:* `true` for non-nominal fields with non-log scales; `\"greedy\"` for log scales; otherwise `false`.\n  - `titleFont` :   (String/Symbol) Font of the title. (e.g., `\"Helvetica Neue\"`).\n  - `tickColor` :   (String/Symbol) The color of the axis's tick.\n  - `gridOpacity` :   (Number) The stroke opacity of grid (value between [0,1])  *Default value:* (`1` by default)\n  - `gridWidth` :   (Number) The grid width, in pixels.\n  - `titleAngle` :   (Number) Angle in degrees of axis titles.\n  - `titleMaxLength` :   (Number) Max length for axis title if the title is automatically generated from the field's description.\n  - `titleLimit` :   (Number) Maximum allowed pixel width of axis titles.\n  - `titleY` :   (Number) Y-coordinate of the axis title relative to the axis group.\n  - `grid` :   (Bool) A boolean flag indicating if grid lines should be included as part of the axis  *Default value:* `true` for [continuous scales](scale.html#continuous) that are not binned; otherwise, `false`.\n  - `gridColor` :   (String/Symbol) Color of gridlines.\n  - `bandPosition` :   (Number) An interpolation fraction indicating where, for `band` scales, axis ticks should be positioned. A value of `0` places ticks at the left edge of their bands. A value of `0.5` places ticks in the middle of their bands.\n  - `labelFont` :   (String/Symbol) The font of the tick label.\n  - `titleAlign` :   (String/Symbol) Horizontal text alignment of axis titles.\n  - `titleBaseline` :   (String/Symbol) Vertical text baseline for axis titles.\n  - `gridDash` :   (Array of Number) The offset (in pixels) into which to begin drawing with the grid dash array.\n  - `domain` : A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.  *Default value:* `true` *see help for `vldomain()`*\n  - `labelFontSize` :   (Number) The font size of the label, in pixels.\n  - `labels` :   (Bool) A boolean flag indicating if labels should be included as part of the axis.  *Default value:*  `true`.\n  - `labelColor` :   (String/Symbol) The color of the tick label, can be in hex color code or regular color name.\n  - `labelLimit` :   (Number) Maximum allowed pixel width of axis tick labels.\n  - `maxExtent` :   (Number) The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.  *Default value:* `undefined`.\n  - `labelFlush` :   (Bool or Number) Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.  *Default value:* `true` for axis of a continuous x-scale. Otherwise, `false`.\n  - `ticks` :   (Bool) Boolean value that determines whether the axis should include ticks.\n  - `titleColor` :   (String/Symbol) Color of the title, can be in hex color code or regular color name.\n- `projection` : Any property of Projection can be in config *see help for `vlprojection()`*\n- `axisRight` :   - `domainColor` :   (String/Symbol) Color of axis domain line.  *Default value:*  (none, using Vega default).\n  - `labelBound` :   (Bool or Number) Indicates if labels should be hidden if they exceed the axis range. If `false `(the default) no bounds overlap analysis is performed. If `true`, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.  *Default value:* `false`.\n  - `titleX` :   (Number) X-coordinate of the axis title relative to the axis group.\n  - `labelPadding` :   (Number) The padding, in pixels, between axis and text labels.\n  - `tickRound` :   (Bool) Boolean flag indicating if pixel position values should be rounded to the nearest integer.\n  - `tickWidth` :   (Number) The width, in pixels, of ticks.\n  - `titlePadding` :   (Number) The padding, in pixels, between title and axis.\n  - `tickSize` :   (Number) The size in pixels of axis ticks.\n  - `labelAngle` :   (Number) The rotation angle of the axis labels.  *Default value:* `-90` for nominal and ordinal fields; `0` otherwise.\n  - `minExtent` :   (Number) The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.  *Default value:* `30` for y-axis; `undefined` for x-axis.\n  - `domainWidth` :   (Number) Stroke width of axis domain line  *Default value:*  (none, using Vega default).\n  - `titleFontSize` :   (Number) Font size of the title.\n  - `titleFontWeight` :   (String/Symbol or Number) Font weight of the title. (e.g., `\"bold\"`).\n  - `labelOverlap` :   (Bool, one of parity or one of greedy) The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `\"parity\"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `\"greedy\"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).  *Default value:* `true` for non-nominal fields with non-log scales; `\"greedy\"` for log scales; otherwise `false`.\n  - `titleFont` :   (String/Symbol) Font of the title. (e.g., `\"Helvetica Neue\"`).\n  - `tickColor` :   (String/Symbol) The color of the axis's tick.\n  - `gridOpacity` :   (Number) The stroke opacity of grid (value between [0,1])  *Default value:* (`1` by default)\n  - `gridWidth` :   (Number) The grid width, in pixels.\n  - `titleAngle` :   (Number) Angle in degrees of axis titles.\n  - `titleMaxLength` :   (Number) Max length for axis title if the title is automatically generated from the field's description.\n  - `titleLimit` :   (Number) Maximum allowed pixel width of axis titles.\n  - `titleY` :   (Number) Y-coordinate of the axis title relative to the axis group.\n  - `grid` :   (Bool) A boolean flag indicating if grid lines should be included as part of the axis  *Default value:* `true` for [continuous scales](scale.html#continuous) that are not binned; otherwise, `false`.\n  - `gridColor` :   (String/Symbol) Color of gridlines.\n  - `bandPosition` :   (Number) An interpolation fraction indicating where, for `band` scales, axis ticks should be positioned. A value of `0` places ticks at the left edge of their bands. A value of `0.5` places ticks in the middle of their bands.\n  - `labelFont` :   (String/Symbol) The font of the tick label.\n  - `titleAlign` :   (String/Symbol) Horizontal text alignment of axis titles.\n  - `titleBaseline` :   (String/Symbol) Vertical text baseline for axis titles.\n  - `gridDash` :   (Array of Number) The offset (in pixels) into which to begin drawing with the grid dash array.\n  - `domain` : A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.  *Default value:* `true` *see help for `vldomain()`*\n  - `labelFontSize` :   (Number) The font size of the label, in pixels.\n  - `labels` :   (Bool) A boolean flag indicating if labels should be included as part of the axis.  *Default value:*  `true`.\n  - `labelColor` :   (String/Symbol) The color of the tick label, can be in hex color code or regular color name.\n  - `labelLimit` :   (Number) Maximum allowed pixel width of axis tick labels.\n  - `maxExtent` :   (Number) The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.  *Default value:* `undefined`.\n  - `labelFlush` :   (Bool or Number) Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.  *Default value:* `true` for axis of a continuous x-scale. Otherwise, `false`.\n  - `ticks` :   (Bool) Boolean value that determines whether the axis should include ticks.\n  - `titleColor` :   (String/Symbol) Color of the title, can be in hex color code or regular color name.\n- `invalidValues` :   (String/Symbol or Void) Defines how Vega-Lite should handle invalid values (`null` and `NaN`). - If set to `\"filter\"` (default), all data items with null values are filtered. - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.\n- `axisLeft` :   - `domainColor` :   (String/Symbol) Color of axis domain line.  *Default value:*  (none, using Vega default).\n  - `labelBound` :   (Bool or Number) Indicates if labels should be hidden if they exceed the axis range. If `false `(the default) no bounds overlap analysis is performed. If `true`, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.  *Default value:* `false`.\n  - `titleX` :   (Number) X-coordinate of the axis title relative to the axis group.\n  - `labelPadding` :   (Number) The padding, in pixels, between axis and text labels.\n  - `tickRound` :   (Bool) Boolean flag indicating if pixel position values should be rounded to the nearest integer.\n  - `tickWidth` :   (Number) The width, in pixels, of ticks.\n  - `titlePadding` :   (Number) The padding, in pixels, between title and axis.\n  - `tickSize` :   (Number) The size in pixels of axis ticks.\n  - `labelAngle` :   (Number) The rotation angle of the axis labels.  *Default value:* `-90` for nominal and ordinal fields; `0` otherwise.\n  - `minExtent` :   (Number) The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.  *Default value:* `30` for y-axis; `undefined` for x-axis.\n  - `domainWidth` :   (Number) Stroke width of axis domain line  *Default value:*  (none, using Vega default).\n  - `titleFontSize` :   (Number) Font size of the title.\n  - `titleFontWeight` :   (String/Symbol or Number) Font weight of the title. (e.g., `\"bold\"`).\n  - `labelOverlap` :   (Bool, one of parity or one of greedy) The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `\"parity\"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `\"greedy\"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).  *Default value:* `true` for non-nominal fields with non-log scales; `\"greedy\"` for log scales; otherwise `false`.\n  - `titleFont` :   (String/Symbol) Font of the title. (e.g., `\"Helvetica Neue\"`).\n  - `tickColor` :   (String/Symbol) The color of the axis's tick.\n  - `gridOpacity` :   (Number) The stroke opacity of grid (value between [0,1])  *Default value:* (`1` by default)\n  - `gridWidth` :   (Number) The grid width, in pixels.\n  - `titleAngle` :   (Number) Angle in degrees of axis titles.\n  - `titleMaxLength` :   (Number) Max length for axis title if the title is automatically generated from the field's description.\n  - `titleLimit` :   (Number) Maximum allowed pixel width of axis titles.\n  - `titleY` :   (Number) Y-coordinate of the axis title relative to the axis group.\n  - `grid` :   (Bool) A boolean flag indicating if grid lines should be included as part of the axis  *Default value:* `true` for [continuous scales](scale.html#continuous) that are not binned; otherwise, `false`.\n  - `gridColor` :   (String/Symbol) Color of gridlines.\n  - `bandPosition` :   (Number) An interpolation fraction indicating where, for `band` scales, axis ticks should be positioned. A value of `0` places ticks at the left edge of their bands. A value of `0.5` places ticks in the middle of their bands.\n  - `labelFont` :   (String/Symbol) The font of the tick label.\n  - `titleAlign` :   (String/Symbol) Horizontal text alignment of axis titles.\n  - `titleBaseline` :   (String/Symbol) Vertical text baseline for axis titles.\n  - `gridDash` :   (Array of Number) The offset (in pixels) into which to begin drawing with the grid dash array.\n  - `domain` : A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.  *Default value:* `true` *see help for `vldomain()`*\n  - `labelFontSize` :   (Number) The font size of the label, in pixels.\n  - `labels` :   (Bool) A boolean flag indicating if labels should be included as part of the axis.  *Default value:*  `true`.\n  - `labelColor` :   (String/Symbol) The color of the tick label, can be in hex color code or regular color name.\n  - `labelLimit` :   (Number) Maximum allowed pixel width of axis tick labels.\n  - `maxExtent` :   (Number) The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.  *Default value:* `undefined`.\n  - `labelFlush` :   (Bool or Number) Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.  *Default value:* `true` for axis of a continuous x-scale. Otherwise, `false`.\n  - `ticks` :   (Bool) Boolean value that determines whether the axis should include ticks.\n  - `titleColor` :   (String/Symbol) Color of the title, can be in hex color code or regular color name.\n- `title` :  *see help for `vltitle()`*\n- `autosize` : Sets how the visualization size should be determined. If a string, should be one of `\"pad\"`, `\"fit\"` or `\"none\"`. Object values can additionally specify parameters for content sizing and automatic resizing. `\"fit\"` is only supported for single and layered views that don't use `rangeStep`.  *Default value*: `pad` *see help for `vlautosize()`*\n- `geoshape` :   - `tension` :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\n  - `stroke` :   (String/Symbol) Default Stroke Color.  This has higher precedence than config.color  *Default value:* (None)\n  - `dy` :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n  - `fontSize` :   (Number) The font size, in pixels.\n  - `strokeOpacity` :   (Number) The stroke opacity (value between [0,1]).  *Default value:* `1`\n  - `angle` :   (Number) The rotation angle of the text, in degrees.\n  - `orient` :   (one of horizontal,vertical)\n  - `strokeDashOffset` :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\n  - `opacity` : The overall opacity (value between [0,1]).  *Default value:* `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise. *see help for `vlopacity()`*\n  - `fontWeight` :   (one of normal,bold or Number) The font weight (e.g., `\"bold\"`).\n  - `filled` :   (Bool) Whether the mark's color should be used as fill color instead of stroke color.  *Default value:* `true` for all marks except `point` and `false` for `point`.  *Applicable for:* `bar`, `point`, `circle`, `square`, and `area` marks.  *Note:* This property cannot be used in a [style config](mark.html#style-config).\n  - `shape` : The default symbol shape to use. One of: `\"circle\"` (default), `\"square\"`, `\"cross\"`, `\"diamond\"`, `\"triangle-up\"`, or `\"triangle-down\"`, or a custom SVG path.  *Default value:* `\"circle\"` *see help for `vlshape()`*\n  - `theta` :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating \"north\".\n  - `fontStyle` :   (one of normal,italic)\n  - `font` :   (String/Symbol) The typeface to set the text in (e.g., `\"Helvetica Neue\"`).\n  - `href` : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. *see help for `vlhref()`*\n  - `fillOpacity` :   (Number) The fill opacity (value between [0,1]).  *Default value:* `1`\n  - `dx` :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n  - `fill` :   (String/Symbol) Default Fill Color.  This has higher precedence than config.color  *Default value:* (None)\n  - `radius` :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.\n  - `align` :   (one of left,right,center)\n  - `strokeWidth` :   (Number) The stroke width, in pixels.\n  - `size` : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  *Default value:* `30` *see help for `vlsize()`*\n  - `cursor` :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.\n  - `strokeDash` :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\n  - `interpolate` :  *see help for `vlinterpolate()`*\n  - `color` : Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.  *Default value:* <span style=\"color: #4682b4;\">&#9632;</span> `\"#4682b4\"`  *Note:* This property cannot be used in a [style config](mark.html#style-config). *see help for `vlcolor()`*\n  - `text` : Placeholder text if the `text` channel is not specified *see help for `vltext()`*\n  - `baseline` :   (one of bottom,top,middle)\n  - `limit` :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\n- `text` :  *see help for `vltext()`*\n- `legend` :  *see help for `vllegend()`*\n" vlconfig
@doc "## `vlaggregate` in `vltransform()`\n(Array of ???) Array of objects that define fields to aggregate.\n" vlaggregate
@doc "## `vlbar` in `vlconfig()`\n- `tension` :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\n- `stroke` :   (String/Symbol) Default Stroke Color.  This has higher precedence than config.color  *Default value:* (None)\n- `dy` :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n- `fontSize` :   (Number) The font size, in pixels.\n- `strokeOpacity` :   (Number) The stroke opacity (value between [0,1]).  *Default value:* `1`\n- `angle` :   (Number) The rotation angle of the text, in degrees.\n- `opacity` : The overall opacity (value between [0,1]).  *Default value:* `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise. *see help for `vlopacity()`*\n- `continuousBandSize` :   (Number) The default size of the bars on continuous scales.  *Default value:* `5`\n- `fontWeight` :   (one of normal,bold or Number) The font weight (e.g., `\"bold\"`).\n- `binSpacing` :   (Number) Offset between bar for binned field.  Ideal value for this is either 0 (Preferred by statisticians) or 1 (Vega-Lite Default, D3 example style).  *Default value:* `1`\n- `filled` :   (Bool) Whether the mark's color should be used as fill color instead of stroke color.  *Default value:* `true` for all marks except `point` and `false` for `point`.  *Applicable for:* `bar`, `point`, `circle`, `square`, and `area` marks.  *Note:* This property cannot be used in a [style config](mark.html#style-config).\n- `orient` :   (one of horizontal,vertical)\n- `shape` : The default symbol shape to use. One of: `\"circle\"` (default), `\"square\"`, `\"cross\"`, `\"diamond\"`, `\"triangle-up\"`, or `\"triangle-down\"`, or a custom SVG path.  *Default value:* `\"circle\"` *see help for `vlshape()`*\n- `strokeDashOffset` :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\n- `theta` :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating \"north\".\n- `fontStyle` :   (one of normal,italic)\n- `font` :   (String/Symbol) The typeface to set the text in (e.g., `\"Helvetica Neue\"`).\n- `href` : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. *see help for `vlhref()`*\n- `dx` :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n- `fill` :   (String/Symbol) Default Fill Color.  This has higher precedence than config.color  *Default value:* (None)\n- `fillOpacity` :   (Number) The fill opacity (value between [0,1]).  *Default value:* `1`\n- `radius` :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.\n- `align` :   (one of left,right,center)\n- `strokeWidth` :   (Number) The stroke width, in pixels.\n- `size` : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  *Default value:* `30` *see help for `vlsize()`*\n- `cursor` :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.\n- `strokeDash` :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\n- `discreteBandSize` :   (Number) The size of the bars.  If unspecified, the default size is  `bandSize-1`, which provides 1 pixel offset between bars.\n- `interpolate` :  *see help for `vlinterpolate()`*\n- `color` : Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.  *Default value:* <span style=\"color: #4682b4;\">&#9632;</span> `\"#4682b4\"`  *Note:* This property cannot be used in a [style config](mark.html#style-config). *see help for `vlcolor()`*\n- `text` : Placeholder text if the `text` channel is not specified *see help for `vltext()`*\n- `baseline` :   (one of bottom,top,middle)\n- `limit` :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\n" vlbar
@doc "## `vlx` in `vlencoding()`\nOne of :\n\n- **case #1**\n  - `axis` : An object defining properties of axis's gridlines, ticks and labels. If `null`, the axis for the encoding channel will be removed.  *Default value:* If undefined, default [axis properties](https://vega.github.io/vega-lite/docs/axis.html) are applied. *see help for `vlaxis()`*\n  - `bin` : A flag for binning a `quantitative` field, or [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params). If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.  *Default value:* `false` *see help for `vlbin()`*\n  - `sort` : Sort order for the encoded field. Supported `sort` values include `\"ascending\"`, `\"descending\"` and `null` (no sorting). For fields with discrete domains, `sort` can also be a [sort field definition object](https://vega.github.io/vega-lite/docs/sort.html#sort-field).  *Default value:* `\"ascending\"` *see help for `vlsort()`*\n  - `stack` :   (one of zero,normalize,center or Void) Type of stacking offset if the field should be stacked. `stack` is only applicable for `x` and `y` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.  `stack` can be one of the following values: - `\"zero\"`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart). - `\"normalize\"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/> -`\"center\"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)). - `null` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.  *Default value:* `zero` for plots with all of the following conditions are true: (1) the mark is `bar` or `area`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y.  Otherwise, `null` by default.\n  - `field` : *Required.* A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.  *Note:* Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`). If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).  *Note:* `field` is not required if `aggregate` is `count`. *see help for `vlfield()`*\n  - `timeUnit` :   (??? or ???)\n  - `aggregate` :  *see help for `vlaggregate()`*\n  - `scale` :  *see help for `vlscale()`*\n  - `typ` :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n\n- **case #2**\n  Definition object for a constant value of an encoding channel.\n\n  - `value` :   (Number, String/Symbol or Bool) A constant value in visual domain (e.g., `\"red\"` / \"#0099ff\" for color, values between `0` to `1` for opacity).\n" vlx
@doc "## `vlfilter` in `vltransform()`\nOne of :\n\n- **case #1**\n  (String/Symbol)\n\n- **case #2**\n  - `not` :   (Void)\n\n- **case #3**\n  - `timeUnit` :   (??? or ???)\n  - `equal` : The value that the field should be equal to. *see help for `vlequal()`*\n  - `field` : Field to be filtered. *see help for `vlfield()`*\n\n- **case #4**\n  - `range` : An array of inclusive minimum and maximum values for a field value of a data item to be included in the filtered data. *see help for `vlrange()`*\n  - `timeUnit` :   (??? or ???)\n  - `field` : Field to be filtered *see help for `vlfield()`*\n\n- **case #5**\n  - `or` :   (Array of Void)\n\n- **case #6**\n  - `and` :   (Array of Void)\n\n- **case #7**\n  - `selection` :  *see help for `vlselection()`*\n\n- **case #8**\n  - `timeUnit` :   (??? or ???)\n  - `field` : Field to be filtered *see help for `vlfield()`*\n  - `oneOf` : A set of values that the `field`'s value should be a member of, for a data item included in the filtered data. *see help for `vloneOf()`*\n" vlfilter
@doc "## `vlramp` in `vlrange()`\n- `count` :   (Number)\n- `extent` :   (Array of Number)\n- `scheme` :  *see help for `vlscheme()`*\n" vlramp
@doc "## `vlselection` in `vllayer()` and `vlspec()`\nA key-value mapping between selection names and definitions.\n\n\n## `vlselection` in `plot()`\nA key-value mapping between selection names and definitions.\n\n\n## `vlselection` in `vlconfig()`\n- `interval` :  *see help for `vlinterval()`*\n- `multi` :  *see help for `vlmulti()`*\n- `single` :  *see help for `vlsingle()`*\n\n## `vlselection` in `vlunclear_what_to_do()`\nOne of :\n\n- **case #1**\n  - `not` :   (Void)\n\n- **case #2**\n  - `and` :   (Array of Void)\n\n- **case #3**\n  - `or` :   (Array of Void)\n" vlselection
